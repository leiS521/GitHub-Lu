<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LuTHEr网络博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tamron.club/"/>
  <updated>2018-09-03T08:16:31.587Z</updated>
  <id>http://tamron.club/</id>
  
  <author>
    <name>LuTHEr</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows服务</title>
    <link href="http://tamron.club/2018/08/31/Windows%E6%9C%8D%E5%8A%A1/"/>
    <id>http://tamron.club/2018/08/31/Windows服务/</id>
    <published>2018-08-31T03:20:11.000Z</published>
    <updated>2018-09-03T08:16:31.587Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前有个需求是新增的表单数据里面有个截止时间，需要根据截止时间的前24小时，1小时，15分钟来定时的推送，提醒APP用户当前表单快要到期。。。。</p></blockquote><h3 id="个人笔记"><a href="#个人笔记" class="headerlink" title="个人笔记"></a>个人笔记</h3><blockquote><p>C#可以开发Windows服务，每分钟查询一次数据库，保持占用数据库连接的频率太高了，会导致其他API不稳定。然后决定采用Redis来存储数据，表单新增，修改，删除的时候同步操作Redis数据，这样保持Redis数据实时更新有效。Windows服务定期查询Redis数据，对于符合条件的数据执行推送及提醒代码</p></blockquote><a id="more"></a> <h3 id="Redis数据结构"><a href="#Redis数据结构" class="headerlink" title="Redis数据结构"></a>Redis数据结构</h3><p>Redis目前有五种数据结构，那么如何去选择符合当前业务的数据结构呢</p><table><thead><tr><th style="text-align:center">结构类型</th><th style="text-align:center">结构存储的值</th><th style="text-align:center">结构的读写能力</th></tr></thead><tbody><tr><td style="text-align:center">string</td><td style="text-align:center">可以是字符串啊，整数，浮点数</td><td style="text-align:center">对整个字符串或者字符串的其中一分部分进行操作，对整数和浮点数执行的自增或自减操作</td></tr><tr><td style="text-align:center">list</td><td style="text-align:center">一个链表，链表上每个节点都包含了一个字符串</td><td style="text-align:center">从链表的两端推入或弹出元素，根据偏移量对链表进行修剪；读取单个或多个元素，根据值查找或者移除元素</td></tr><tr><td style="text-align:center">set</td><td style="text-align:center">包含字符串的无序收集器，并且被包含的每个字符都是独一无二各不相同的</td><td style="text-align:center">添加、获取、移除单个元素，检查一个元素是否存在与集合中，计算交集，并集，差集，从集合里面随机获取元素</td></tr><tr><td style="text-align:center">hash</td><td style="text-align:center">包含键值对的无序散列表</td><td style="text-align:center">添加、获取、移除单个键值对，获取所有单个键值对</td></tr><tr><td style="text-align:center">zset</td><td style="text-align:center">字符串成员与浮点数分值之间的有序映射，元素的排列顺序由分值的大小决定</td><td style="text-align:center">添加、获取、删除单个元素，根据分值范围或成员来获取元素</td></tr></tbody></table><h3 id="关于使用场景"><a href="#关于使用场景" class="headerlink" title="关于使用场景"></a>关于使用场景</h3><p>在这里推荐两个网站</p><ul><li><a href="http://www.runoob.com/w3cnote/redis-use-scene.html" target="_blank" rel="noopener">菜鸟教程-Redis数据结构的使用场景</a></li><li><a href="https://blog.csdn.net/qq_35568881/article/details/78779679" target="_blank" rel="noopener">redis5种数据结构讲解及使用场景</a></li></ul><h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>最后我出于三个原因选择了无序列表（集合）</p><ol><li>无序列表元素唯一，存储量大Set可包含的最大元素数量是4294967295</li><li>Sets之间的聚合计算操作效率极高</li><li>使用Redis客户端查看Key只有一个，Value是个列表，界面简洁，查询方便</li></ol><p>最后通过Redis观察的数据结构是这样的</p><p><img src="http://tamron.club/img/Redis视图.png" alt=""></p><p>基于项目代码做了个<a href="https://github.com/GitHub-Lu/WindowsSevice" target="_blank" rel="noopener">Demo</a>，希望不要吝啬你的小星星</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;目前有个需求是新增的表单数据里面有个截止时间，需要根据截止时间的前24小时，1小时，15分钟来定时的推送，提醒APP用户当前表单快要到期。。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;个人笔记&quot;&gt;&lt;a href=&quot;#个人笔记&quot; class=&quot;headerlink&quot; title=&quot;个人笔记&quot;&gt;&lt;/a&gt;个人笔记&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;C#可以开发Windows服务，每分钟查询一次数据库，保持占用数据库连接的频率太高了，会导致其他API不稳定。然后决定采用Redis来存储数据，表单新增，修改，删除的时候同步操作Redis数据，这样保持Redis数据实时更新有效。Windows服务定期查询Redis数据，对于符合条件的数据执行推送及提醒代码&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term=".net" scheme="http://tamron.club/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>数据库执行计划</title>
    <link href="http://tamron.club/2018/08/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
    <id>http://tamron.club/2018/08/19/数据库执行计划/</id>
    <published>2018-08-19T03:20:11.000Z</published>
    <updated>2018-08-31T01:43:48.615Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>数据库的执行计划通俗点说就是，数据库服务器在执行sql语句的时候，会准备几套方案，最后选择消耗资源最小的那个方案。就是执行计划。</p></blockquote><h3 id="个人笔记"><a href="#个人笔记" class="headerlink" title="个人笔记"></a>个人笔记</h3><blockquote><p>比如执行一条sql语句，但是server并没有告诉服务器如何去做。服务器在收到sql语句后会先检查语法错误，没有问题才会解析执行。在这个过程中，他会考虑是执行整张表，还是根据索引呢，服务器会比较所有可能的方法所好的资源，最终sql语句被物理性执行的计划叫做执行计划，</p></blockquote><a id="more"></a> <h3 id="执行计划在哪里"><a href="#执行计划在哪里" class="headerlink" title="执行计划在哪里"></a>执行计划在哪里</h3><p><img src="http://tamron.club/img/执行计划.png" alt=""></p><h3 id="执行计划有哪些"><a href="#执行计划有哪些" class="headerlink" title="执行计划有哪些"></a>执行计划有哪些</h3><ul><li><p>【Table Scan】：遍历整个表，查找所有匹配的记录行。这个操作将会一行一行的检查，当然，效率也是最差的。</p><blockquote><ul><li>全表扫描，大数据扫描必定性能差，查找必定性能高</li></ul></blockquote></li><li><p>【Index Scan】：根据索引，从表中过滤出来一部分记录，再查找所有匹配的记录行，显然比第一种方式的查找范围要小，因此比【Table Scan】要快。</p><blockquote><ul><li>引起全表扫描并不是like，而是%</li><li>当前匹配的查询条件可以使用非聚集索引，可能是有&lt;,&gt;,%等等放弃了使用非聚集索引查找</li></ul></blockquote></li><li><p>【Index Seek】：根据索引，定位（获取）记录的存放位置，然后取得记录，因此，比起前二种方式会更快。</p><blockquote><ul><li>非聚集索引查找索引页然后再获取数据，这里有个坑是你Select 查找的字段必须是聚集索引，或者是非聚集索引，如果查找了*,或者其他字段，那将是全表扫描</li></ul></blockquote></li><li><p>【Clustered Index Scan】：和【Table Scan】一样。注意：不要以为这里有个Index，就认为不一样了。 其实它的意思是说：按聚集索引来逐行扫描每一行记录，因为记录就是按聚集索引来顺序存放的。 而【Table Scan】只是说：要扫描的表没有聚集索引而已，因此这二个操作本质上也是一样的。</p><blockquote><ul><li>意思是表里面有聚集索引，但是没有利用聚集索引去查找</li></ul></blockquote></li><li><p>【Clustered Index Seek】：直接根据聚集索引获取记录，最快！</p><blockquote><ul><li>完美，我们永远只会记住第一</li></ul></blockquote></li></ul><h3 id="如何去优化？"><a href="#如何去优化？" class="headerlink" title="如何去优化？"></a>如何去优化？</h3><p>当发现某个查询比较慢时，可以首先检查哪些操作的成本比较高，再看看那些操作在查找记录时， 是不是【Table Scan】或者【Clustered Index Scan】，如果确实和这二种操作类型有关，则要考虑增加索引来解决了。关于索引的记录请<a href="http://tamron.club/2018/08/16/数据库索引优化/">查看这里</a></p><p>这里推荐一篇<a href="https://blog.csdn.net/lvyanqin2013/article/details/78721239" target="_blank" rel="noopener">博客</a>，这篇信息讲的非常详细，但是今天这篇文章记录的是SqlServer中的执行计划</p><p>目前我的数据库安装版本是SqlServer2017服务和SSMS客户端</p><p>这里只是做个笔记，上次本地数据库导入百万条数据等待时间太长放弃了</p><blockquote><p>最后引用MSDN原话：不要总是将索引的使用等同于良好的性能，或者将良好的性能等同于索引的高效使用。如果只要使用索引就能获得最佳性能，那查询优化器的工作就简单了。但事实上，不正确的索引选择并不能获得最佳性能。因此，查询优化器的任务是只在索引或索引组合能提高性能时才选择它，而在索引检索有碍性能时则避免使用它。 </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;数据库的执行计划通俗点说就是，数据库服务器在执行sql语句的时候，会准备几套方案，最后选择消耗资源最小的那个方案。就是执行计划。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;个人笔记&quot;&gt;&lt;a href=&quot;#个人笔记&quot; class=&quot;headerlink&quot; title=&quot;个人笔记&quot;&gt;&lt;/a&gt;个人笔记&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;比如执行一条sql语句，但是server并没有告诉服务器如何去做。服务器在收到sql语句后会先检查语法错误，没有问题才会解析执行。在这个过程中，他会考虑是执行整张表，还是根据索引呢，服务器会比较所有可能的方法所好的资源，最终sql语句被物理性执行的计划叫做执行计划，&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据库" scheme="http://tamron.club/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库索引优化</title>
    <link href="http://tamron.club/2018/08/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/"/>
    <id>http://tamron.club/2018/08/16/数据库索引优化/</id>
    <published>2018-08-16T03:20:11.000Z</published>
    <updated>2018-08-16T10:59:52.154Z</updated>
    
    <content type="html"><![CDATA[<p>数据库索引优化之从入门到放弃。。。</p><h3 id="个人笔记"><a href="#个人笔记" class="headerlink" title="个人笔记"></a>个人笔记</h3><blockquote><p>索引是关系型数据库中给数据库表中一列或多列的值排序后的存储结构，SQL的主流索引结构有B+树以及Hash结构，聚集索引以及非聚集索引用的是B+树索引。数据库存储数据的格式为数据页面，每页的大小为8KB，nvarchar(8096)</p></blockquote><a id="more"></a> <h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>聚集（clustered）索引，也叫聚簇索引。</p><blockquote><p> 定义：数据行的物理顺序与列值（一般是主键的那一列）的逻辑顺序相同，一个表中只能拥有一个聚集索引。</p></blockquote><p>非聚集（unclustered）索引。</p><blockquote><p>定义：数据行的物理顺序与列值（一般是主键的那一列）的逻辑顺序相同，一个表中只能拥有一个聚集索引。</p></blockquote><h3 id="如何去理解？"><a href="#如何去理解？" class="headerlink" title="如何去理解？"></a>如何去理解？</h3><p>现在有一个图书馆，里面放50本书（不要在意一个只有50本书的图书馆）。其中有一本书叫做《Java从入门到放弃》，现在要求进去快速的找到这本书？？？</p><p>A同学：我进去扫一眼就找到了，用了10秒</p><p>B同学：我进去也扫了一眼，但是没发现，又扫了一眼找到的用了15秒</p><blockquote><p>为什么有的每个同学找到的速度不一样，为什么同样的Sql查询的时间每次都不一样？</p><p>因为每个电脑硬件配置不一样，网速以及外界影响会导致查询时间不同</p></blockquote><p>图书馆：我今天把书整理一下吧，他把书从A到Z的顺序排了个顺序</p><p>A同学：我进去还是扫一眼就找到了，用了5秒</p><p>B同学：我进去也扫了一眼也用了5秒</p><blockquote><p>整理了的书肯定直接找J开头的书，所以能快速的找到这本书</p><p>这就是聚集索引，我把数据根据某个字段进行物理的排序，我（服务器）找数据会提高速度</p></blockquote><p>图书馆：今天进了100万本书</p><p>A同学：我进去问了一下图书管理员，他帮我查了一下书在H货架放着，我去一下找到了花了2秒</p><p>B同学：我进去找J开头书籍，可是J开头的书太多了啊，我花了1分钟</p><blockquote><p>A同学典型的非聚集索引查找方法，因为他去查找索引页（图书管理员）然后再去找书的</p><p>B同学是聚集索引查找方法，因为他还是根据物理排序的J去慢慢找的</p></blockquote><p>通过这个故事，应该对聚集索引和非聚集索引有个大概的认识了</p><blockquote><p>8月10号我和公司的DBA交流了一下：</p><p>索引这个东西不是加就好，跟电脑配置，网速都有关系。有时候你加索引还没有不加索引的查询速度快，所以索引适合在具有大数据量的情况下去进行优化。</p><p>主键是GUID建立聚集索引没有任何意义，对资源的一种浪费。建议把聚集索引建立在int,datetime型上</p></blockquote><h3 id="主键是什么？"><a href="#主键是什么？" class="headerlink" title="主键是什么？"></a>主键是什么？</h3><p>后来自己本地练习了一下。</p><p>我创建表的时候，设置一个主键，数据库会自动的给主键建立聚集索引。</p><p>然后我把聚集索引删除了，发现表中的主键也消失了。。。</p><p>我开始上网查资料，看博客</p><blockquote><p><a href="https://www.cnblogs.com/lj820403/p/7246657.html" target="_blank" rel="noopener">https://www.cnblogs.com/lj820403/p/7246657.html</a></p></blockquote><p>主键寄宿于索引，主键的特性是唯一性约束。</p><h3 id="索引的重点笔记"><a href="#索引的重点笔记" class="headerlink" title="索引的重点笔记"></a>索引的重点笔记</h3><ul><li>非聚集索引的建立会影响新增修改等操作的性能，所以并非非聚集索引越多越好</li><li>聚集索引只能建立一个，但是可以建立在多个字段上</li><li>非聚集索引可以建立多个，也可以建立多个字段</li><li>一个表索引最多不要超过5个</li><li>SQL的优化，使用like，is null,not null,&lt;,&gt;等可能会造成表放弃索引使用全表搜索（索引报废）</li><li>GUID不建议做聚集索引，没有意义。聚集索引一般做在int,bingint,datetime上</li><li>非聚集索引适合建立在where条件经常查询的字段上</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库索引优化之从入门到放弃。。。&lt;/p&gt;
&lt;h3 id=&quot;个人笔记&quot;&gt;&lt;a href=&quot;#个人笔记&quot; class=&quot;headerlink&quot; title=&quot;个人笔记&quot;&gt;&lt;/a&gt;个人笔记&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;索引是关系型数据库中给数据库表中一列或多列的值排序后的存储结构，SQL的主流索引结构有B+树以及Hash结构，聚集索引以及非聚集索引用的是B+树索引。数据库存储数据的格式为数据页面，每页的大小为8KB，nvarchar(8096)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据库" scheme="http://tamron.club/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>23种设计模式概念</title>
    <link href="http://tamron.club/2018/07/17/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E5%BF%B5/"/>
    <id>http://tamron.club/2018/07/17/23种设计模式概念/</id>
    <published>2018-07-17T00:07:04.000Z</published>
    <updated>2018-07-23T01:08:50.224Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>1.创建型模式</strong><br>工厂方法（Factory Method）<br>在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节。工厂方法模式的核心是一个抽象工厂类，各种具体工厂类通过抽象工厂类将工厂方法继承下来。如此使得客户可以只关心抽象产品和抽象工厂，完全不用理会返回的是哪一种具体产品，也不用关系它是如何被具体工厂创建的。<br><a id="more"></a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&gt; namespace 设计模式之工厂方法模式</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 菜抽象类</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public abstract class Food</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 输出点了什么菜</span><br><span class="line">&gt;         public abstract void Print();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 西红柿炒鸡蛋这道菜</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class TomatoScrambledEggs : Food</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override void Print()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;西红柿炒蛋好了！&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 土豆肉丝这道菜</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class ShreddedPorkWithPotatoes : Food</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override void Print()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;土豆肉丝好了&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 抽象工厂类</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public abstract class Creator</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 工厂方法</span><br><span class="line">&gt;         public abstract Food CreateFoddFactory();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 西红柿炒蛋工厂类</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class TomatoScrambledEggsFactory:Creator</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 负责创建西红柿炒蛋这道菜</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">&gt;         public override Food CreateFoddFactory()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return new TomatoScrambledEggs();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 土豆肉丝工厂类</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class ShreddedPorkWithPotatoesFactory:Creator</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 负责创建土豆肉丝这道菜</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">&gt;         public override Food CreateFoddFactory()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return new ShreddedPorkWithPotatoes();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 客户端调用</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     class Client</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 初始化做菜的两个工厂（）</span><br><span class="line">&gt;             Creator shreddedPorkWithPotatoesFactory = new ShreddedPorkWithPotatoesFactory();</span><br><span class="line">&gt;             Creator tomatoScrambledEggsFactory = new TomatoScrambledEggsFactory();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 开始做西红柿炒蛋</span><br><span class="line">&gt;             Food tomatoScrambleEggs = tomatoScrambledEggsFactory.CreateFoddFactory();</span><br><span class="line">&gt;             tomatoScrambleEggs.Print();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             //开始做土豆肉丝</span><br><span class="line">&gt;             Food shreddedPorkWithPotatoes = shreddedPorkWithPotatoesFactory.CreateFoddFactory();</span><br><span class="line">&gt;             shreddedPorkWithPotatoes.Print();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;  </span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>2.抽象工厂模式（Abstract Factory）</strong><br>抽象工厂模式的主要优点是隔离了具体类的生成，使得客户不需要知道什么被创建了。犹豫这种隔离，更换一个具体工厂就变得相对容易。所有的具体工厂都实现了抽象工厂中定义的那些公共接口，因此只需改变具体工厂的实例，就可以在某种程度上改变这个软件的系统的行为。另外，应用抽象工厂模式符合GRASP纯虚构的模式，可以实现高内聚低耦合的设计目的，因此抽象工厂模式得到了广泛应用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 下面以绝味鸭脖连锁店为例子演示下抽象工厂模式</span><br><span class="line">&gt;     /// 因为每个地方的喜欢的口味不一样，有些地方喜欢辣点的，有些地方喜欢吃不辣点</span><br><span class="line">&gt;     /// 客户端调用</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     class Client</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 南昌工厂制作南昌的鸭脖和鸭架</span><br><span class="line">&gt;             AbstractFactory nanChangFactory = new NanChangFactory();</span><br><span class="line">&gt;             YaBo nanChangYabo = nanChangFactory.CreateYaBo();</span><br><span class="line">&gt;             nanChangYabo.Print();</span><br><span class="line">&gt;             YaJia nanChangYajia= nanChangFactory.CreateYaJia();</span><br><span class="line">&gt;             nanChangYajia.Print();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 上海工厂制作上海的鸭脖和鸭架</span><br><span class="line">&gt;             AbstractFactory shangHaiFactory = new ShangHaiFactory();</span><br><span class="line">&gt;             shangHaiFactory.CreateYaBo().Print();</span><br><span class="line">&gt;             shangHaiFactory.CreateYaJia().Print();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 抽象工厂类，提供创建两个不同地方的鸭架和鸭脖的接口</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public abstract class AbstractFactory</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 抽象工厂提供创建一系列产品的接口，这里作为例子，只给出了绝味中鸭脖和鸭架的创建接口</span><br><span class="line">&gt;         public abstract YaBo CreateYaBo();</span><br><span class="line">&gt;         public abstract YaJia CreateYaJia();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 南昌绝味工厂负责制作南昌的鸭脖和鸭架</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class NanChangFactory : AbstractFactory</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 制作南昌鸭脖</span><br><span class="line">&gt;         public override YaBo CreateYaBo()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return new NanChangYaBo();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         // 制作南昌鸭架</span><br><span class="line">&gt;         public override YaJia CreateYaJia()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return new NanChangYaJia();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 上海绝味工厂负责制作上海的鸭脖和鸭架</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class ShangHaiFactory : AbstractFactory</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 制作上海鸭脖</span><br><span class="line">&gt;         public override YaBo CreateYaBo()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return new ShangHaiYaBo();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         // 制作上海鸭架</span><br><span class="line">&gt;         public override YaJia CreateYaJia()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return new ShangHaiYaJia();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 鸭脖抽象类，供每个地方的鸭脖类继承</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public abstract class YaBo</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 打印方法，用于输出信息</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         public abstract void Print();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 鸭架抽象类，供每个地方的鸭架类继承</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public abstract class YaJia</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 打印方法，用于输出信息</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         public abstract void Print();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 南昌的鸭脖类，因为江西人喜欢吃辣的，所以南昌的鸭脖稍微会比上海做的辣</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class NanChangYaBo : YaBo</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override void Print()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;南昌的鸭脖&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 上海的鸭脖没有南昌的鸭脖做的辣</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class ShangHaiYaBo : YaBo</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override void Print()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;上海的鸭脖&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 南昌的鸭架</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class NanChangYaJia : YaJia</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override void Print()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;南昌的鸭架子&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 上海的鸭架</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class ShangHaiYaJia : YaJia</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override void Print()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;上海的鸭架子&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>3.建造者模式（Builder Pattern）</strong><br>建造者模式将一个复杂对象的生成责任作了很好的分配。它把构造过程放在指挥者的方法中，把装配过程放到具体建造者类中。建造者模式的产品之间都有共通点，但有时候，产品之间的差异性很大，这就需要借助工厂方法模式或抽象工厂模式。另外，如果产品的内部变化复杂，Builder的每一个子类都需要对应到不同的产品去做构建的动作、方法，这就需要定义很多个具体建造类来实现这种变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">&gt; using System;</span><br><span class="line">&gt; using System.Collections.Generic;</span><br><span class="line">&gt; using System.Linq;</span><br><span class="line">&gt; using System.Text;</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt; /// &lt;summary&gt;</span><br><span class="line">&gt; /// 以组装电脑为例子</span><br><span class="line">&gt; /// 每台电脑的组成过程都是一致的，但是使用同样的构建过程可以创建不同的表示(即可以组装成不一样的电脑，配置不一样)</span><br><span class="line">&gt; /// 组装电脑的这个场景就可以应用建造者模式来设计</span><br><span class="line">&gt; /// &lt;/summary&gt;</span><br><span class="line">&gt; namespace 设计模式之建造者模式</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 客户类</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     class Customer</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 客户找到电脑城老板说要买电脑，这里要装两台电脑</span><br><span class="line">&gt;             // 创建指挥者和构造者</span><br><span class="line">&gt;             Director director = new Director();</span><br><span class="line">&gt;             Builder b1 = new ConcreteBuilder1();</span><br><span class="line">&gt;             Builder b2 = new ConcreteBuilder2();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 老板叫员工去组装第一台电脑</span><br><span class="line">&gt;             director.Construct(b1);</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 组装完，组装人员搬来组装好的电脑</span><br><span class="line">&gt;             Computer computer1 = b1.GetComputer();</span><br><span class="line">&gt;             computer1.Show();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 老板叫员工去组装第二台电脑</span><br><span class="line">&gt;             director.Construct(b2);</span><br><span class="line">&gt;             Computer computer2 = b2.GetComputer();</span><br><span class="line">&gt;             computer2.Show();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 小王和小李难道会自愿地去组装嘛，谁不想休息的，这必须有一个人叫他们去组装才会去的</span><br><span class="line">&gt;     /// 这个人当然就是老板了，也就是建造者模式中的指挥者</span><br><span class="line">&gt;     /// 指挥创建过程类</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class Director</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 组装电脑</span><br><span class="line">&gt;         public void Construct(Builder builder)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             builder.BuildPartCPU();</span><br><span class="line">&gt;             builder.BuildPartMainBoard();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 电脑类</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class Computer</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 电脑组件集合</span><br><span class="line">&gt;         private IList&lt;string&gt; parts = new List&lt;string&gt;();</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 把单个组件添加到电脑组件集合中</span><br><span class="line">&gt;         public void Add(string part)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             parts.Add(part);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public void Show()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;电脑开始在组装.......&quot;);</span><br><span class="line">&gt;             foreach (string part in parts)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 Console.WriteLine(&quot;组件&quot;+part+&quot;已装好&quot;);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Console.WriteLine(&quot;电脑组装好了&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 抽象建造者，这个场景下为 &quot;组装人&quot; ，这里也可以定义为接口</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public abstract class Builder</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 装CPU</span><br><span class="line">&gt;         public abstract void BuildPartCPU();</span><br><span class="line">&gt;         // 装主板</span><br><span class="line">&gt;         public abstract void BuildPartMainBoard();</span><br><span class="line">&gt;         </span><br><span class="line">&gt;         // 当然还有装硬盘，电源等组件，这里省略</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 获得组装好的电脑</span><br><span class="line">&gt;         public abstract Computer GetComputer();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 具体创建者，具体的某个人为具体创建者，例如：装机小王啊</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class ConcreteBuilder1 : Builder</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         Computer computer = new Computer();</span><br><span class="line">&gt;         public override void BuildPartCPU()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             computer.Add(&quot;CPU1&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void BuildPartMainBoard()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             computer.Add(&quot;Main board1&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override Computer GetComputer()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return computer;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 具体创建者，具体的某个人为具体创建者，例如：装机小李啊</span><br><span class="line">&gt;     /// 又装另一台电脑了</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class ConcreteBuilder2 : Builder</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         Computer computer = new Computer();</span><br><span class="line">&gt;         public override void BuildPartCPU()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             computer.Add(&quot;CPU2&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void BuildPartMainBoard()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             computer.Add(&quot;Main board2&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override Computer GetComputer()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return computer;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>4.单例模式（Single Pattern）</strong><br>Singleton单例模式为一个面向对象的应用程序提供了对象唯一的访问点，不管它实现何种功能，此种模式都为设计及开发团队提供了共享的概念。然而，Singleton对象类派生子类就有很大的困难，只有在父类没有被实例化时才可以实现。值得注意的是，有些对象不可以做成Singleton，比如.net的数据库链接对象(Connection)，整个应用程序同享一个Connection对象会出现连接池溢出错误。另外，.net提供了自动废物回收的技术，因此，如果实例化的对象长时间不被利用，系统会认为它是废物，自动消灭它并回收它的资源，下次利用时又会重新实例化，这种情况下应注意其状态的丢失。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 单例模式的实现</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class Singleton</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 定义一个静态变量来保存类的实例</span><br><span class="line">&gt;         private static Singleton uniqueInstance;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 定义私有构造函数，使外界不能创建该类实例</span><br><span class="line">&gt;         private Singleton()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">&gt;         public static Singleton GetInstance()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 如果类的实例不存在则创建，否则直接返回</span><br><span class="line">&gt;             if (uniqueInstance == null)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 uniqueInstance = new Singleton();</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             return uniqueInstance;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>5.原型模式（Protype Pattern）</strong><br>原型模式得到了广泛的应用，特别是在创建对象成本较大的情况下(初始化需占用较长时间，占用太多CPU资源或网络资源。比如通过Webservice或DCOM创建对象，或者创建对象要装载大文件)，系统如果需要重复利用，新的对象可以通过原型模式对已有对象的属性进行复制并稍作修改来取得。另外，如果系统要保存对象的状态而对象的状态变化很小，或者对象本身占内存不大的时候，也可以用原型模式配合备忘录模式来应用。相反地，如果对象的状态变化很大，或者对象占用内存很大，那么采用状态模式会比原型模式更好。原型模式的缺点是在实现深层复制时需要编写复杂的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&gt;     ///火影忍者中鸣人的影分身和孙悟空的的变都是原型模式</span><br><span class="line">&gt;     class Client</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 孙悟空 原型</span><br><span class="line">&gt;             MonkeyKingPrototype prototypeMonkeyKing = new ConcretePrototype(&quot;MonkeyKing&quot;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 变一个</span><br><span class="line">&gt;             MonkeyKingPrototype cloneMonkeyKing = prototypeMonkeyKing.Clone() as ConcretePrototype;</span><br><span class="line">&gt;             Console.WriteLine(&quot;Cloned1:\t&quot;+cloneMonkeyKing.Id);</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 变两个</span><br><span class="line">&gt;             MonkeyKingPrototype cloneMonkeyKing2 = prototypeMonkeyKing.Clone() as ConcretePrototype;</span><br><span class="line">&gt;             Console.WriteLine(&quot;Cloned2:\t&quot; + cloneMonkeyKing2.Id);</span><br><span class="line">&gt;             Console.ReadLine();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 孙悟空原型</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public  abstract class MonkeyKingPrototype</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public string Id &#123; get; set; &#125;</span><br><span class="line">&gt;         public MonkeyKingPrototype(string id)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.Id = id;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 克隆方法，即孙大圣说“变”</span><br><span class="line">&gt;         public abstract MonkeyKingPrototype Clone();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 创建具体原型</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class ConcretePrototype : MonkeyKingPrototype</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public ConcretePrototype(string id)</span><br><span class="line">&gt;             : base(id)</span><br><span class="line">&gt;         &#123; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 浅拷贝</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">&gt;         public override MonkeyKingPrototype Clone()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 调用MemberwiseClone方法实现的是浅拷贝，另外还有深拷贝</span><br><span class="line">&gt;             return (MonkeyKingPrototype)this.MemberwiseClone();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>6.结构型模式</strong><br>适配器模式（Adapter Pattern）<br>适配器模式可以将一个类的接口和另一个类的接口匹配起来，使用的前提是你不能或不想修改原来的适配器母接口(adaptee)。例如，你向第三方购买了一些类、控件，但是没有源程序，这时，使用适配器模式，你可以统一对象访问接口。但客户调用可能需要变动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&gt; using System;</span><br><span class="line">&gt; /// 这里以插座和插头的例子来诠释适配器模式</span><br><span class="line">&gt; /// 现在我们买的电器插头是2个孔，但是我们买的插座只有3个孔的</span><br><span class="line">&gt; /// 这是我们想把电器插在插座上的话就需要一个电适配器</span><br><span class="line">&gt; namespace 设计模式之适配器模式</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 客户端，客户想要把2个孔的插头 转变成三个孔的插头，这个转变交给适配器就好</span><br><span class="line">&gt;     /// 既然适配器需要完成这个功能，所以它必须同时具体2个孔插头和三个孔插头的特征</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     class Client</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 现在客户端可以通过电适配要使用2个孔的插头了</span><br><span class="line">&gt;             IThreeHole threehole = new PowerAdapter();</span><br><span class="line">&gt;             threehole.Request();</span><br><span class="line">&gt;             Console.ReadLine();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 三个孔的插头，也就是适配器模式中的目标角色</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public interface IThreeHole</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         void Request();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 两个孔的插头，源角色——需要适配的类</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public abstract class TwoHole</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public void SpecificRequest()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;我是两个孔的插头&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 适配器类，接口要放在类的后面</span><br><span class="line">&gt;     /// 适配器类提供了三个孔插头的行为，但其本质是调用两个孔插头的方法</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class PowerAdapter:TwoHole,IThreeHole</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 实现三个孔插头接口方法</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         public void Request()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 调用两个孔插头方法</span><br><span class="line">&gt;             this.SpecificRequest();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>7.桥接模式（Bridge Pattern）</strong><br>桥接模式可以从接口中分离实现功能，使得设计更具扩展性，这样，客户调用方法时根本不需要知道实现的细节。<br>桥接模式减少了子类，假设程序要在2个操作系统中处理6种图像格式，纯粹的继承就需要(2*6)12个子类，而应用桥接模式，只需要(2+6)8个子类。它使得代码更清洁，生成的执行程序文件更小。　　<br>桥接模式的缺陷是抽象类与实现类的双向连接使得运行速度减慢。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 抽象概念中的遥控器，扮演抽象化角色</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class RemoteControl</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 字段</span><br><span class="line">&gt;         private TV implementor;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 属性</span><br><span class="line">&gt;         public TV Implementor</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             get &#123; return implementor; &#125;</span><br><span class="line">&gt;             set &#123; implementor = value; &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 开电视机，这里抽象类中不再提供实现了，而是调用实现类中的实现</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         public virtual void On()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             implementor.On();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 关电视机</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         public virtual void Off()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             implementor.Off();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 换频道</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         public virtual void SetChannel()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             implementor.tuneChannel();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 具体遥控器</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class ConcreteRemote : RemoteControl</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override void SetChannel()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;---------------------&quot;);</span><br><span class="line">&gt;             base.SetChannel();</span><br><span class="line">&gt;             Console.WriteLine(&quot;---------------------&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>8.组合模式（Composite Pattern）</strong><br>组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，使得增加新部件也更容易，因为它让客户忽略了层次的不同性，而它的结构又是动态的，提供了对象管理的灵活接口。组合模式对于树结构的控制有着神奇的功效，例如在人力资源系统的组织架构及ERP系统的BOM设计中，组合模式得到重点应用。<br>组合模式的缺陷是使得设计变得更加抽象。对象的商业规则如果很复杂，则实现组合模式具有很大挑战性，并且，不是所有的方法都与叶部件子类有关联。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">&gt; // 通过一些简单图形以及一些复杂图形构建图形树来演示组合模式</span><br><span class="line">&gt;     // 客户端调用</span><br><span class="line">&gt;     class Client</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             ComplexGraphics complexGraphics = new ComplexGraphics(&quot;一个复杂图形和两条线段组成的复杂图形&quot;);</span><br><span class="line">&gt;             complexGraphics.Add(new Line(&quot;线段A&quot;));</span><br><span class="line">&gt;             ComplexGraphics CompositeCG = new ComplexGraphics(&quot;一个圆和一条线组成的复杂图形&quot;);</span><br><span class="line">&gt;             CompositeCG.Add(new Circle(&quot;圆&quot;));</span><br><span class="line">&gt;             CompositeCG.Add(new Circle(&quot;线段B&quot;));</span><br><span class="line">&gt;             complexGraphics.Add(CompositeCG);</span><br><span class="line">&gt;             Line l = new Line(&quot;线段C&quot;);</span><br><span class="line">&gt;             complexGraphics.Add(l);</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 显示复杂图形的画法</span><br><span class="line">&gt;             Console.WriteLine(&quot;复杂图形的绘制如下：&quot;);</span><br><span class="line">&gt;             Console.WriteLine(&quot;---------------------&quot;);</span><br><span class="line">&gt;             complexGraphics.Draw();</span><br><span class="line">&gt;             Console.WriteLine(&quot;复杂图形绘制完成&quot;);</span><br><span class="line">&gt;             Console.WriteLine(&quot;---------------------&quot;);</span><br><span class="line">&gt;             Console.WriteLine();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 移除一个组件再显示复杂图形的画法</span><br><span class="line">&gt;             complexGraphics.Remove(l);</span><br><span class="line">&gt;             Console.WriteLine(&quot;移除线段C后，复杂图形的绘制如下：&quot;);</span><br><span class="line">&gt;             Console.WriteLine(&quot;---------------------&quot;);</span><br><span class="line">&gt;             complexGraphics.Draw();</span><br><span class="line">&gt;             Console.WriteLine(&quot;复杂图形绘制完成&quot;);</span><br><span class="line">&gt;             Console.WriteLine(&quot;---------------------&quot;);</span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 图形抽象类，</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public abstract class Graphics</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public string Name &#123; get; set; &#125;</span><br><span class="line">&gt;         public Graphics(string name)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.Name = name;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public abstract void Draw();</span><br><span class="line">&gt;         public abstract void Add(Graphics g);</span><br><span class="line">&gt;         public abstract void Remove(Graphics g);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 简单图形类——线</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class Line : Graphics</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public Line(string name)</span><br><span class="line">&gt;             : base(name)</span><br><span class="line">&gt;         &#123; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 重写父类抽象方法</span><br><span class="line">&gt;         public override void Draw()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;画  &quot; + Name);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         // 因为简单图形在添加或移除其他图形，所以简单图形Add或Remove方法没有任何意义</span><br><span class="line">&gt;         // 如果客户端调用了简单图形的Add或Remove方法将会在运行时抛出异常</span><br><span class="line">&gt;         // 我们可以在客户端捕获该类移除并处理</span><br><span class="line">&gt;         public override void Add(Graphics g)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             throw new Exception(&quot;不能向简单图形Line添加其他图形&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         public override void Remove(Graphics g)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             throw new Exception(&quot;不能向简单图形Line移除其他图形&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 简单图形类——圆</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class Circle : Graphics</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public Circle(string name)</span><br><span class="line">&gt;             : base(name)</span><br><span class="line">&gt;         &#123; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 重写父类抽象方法</span><br><span class="line">&gt;         public override void Draw()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;画  &quot; + Name);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void Add(Graphics g)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             throw new Exception(&quot;不能向简单图形Circle添加其他图形&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         public override void Remove(Graphics g)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             throw new Exception(&quot;不能向简单图形Circle移除其他图形&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 复杂图形，由一些简单图形组成,这里假设该复杂图形由一个圆两条线组成的复杂图形</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class ComplexGraphics : Graphics</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         private List&lt;Graphics&gt; complexGraphicsList = new List&lt;Graphics&gt;();</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public ComplexGraphics(string name)</span><br><span class="line">&gt;             : base(name)</span><br><span class="line">&gt;         &#123; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 复杂图形的画法</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         public override void Draw()</span><br><span class="line">&gt;         &#123;          </span><br><span class="line">&gt;             foreach (Graphics g in complexGraphicsList)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 g.Draw();</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void Add(Graphics g)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             complexGraphicsList.Add(g);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         public override void Remove(Graphics g)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             complexGraphicsList.Remove(g);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>9.装饰模式（Decorator Pattern）</strong><br>装饰模式提供了比静态继承更好的柔韧性，它允许开发一系列的功能类用来代替增加对象的行为，这既不会污染原来对象的源码，还能使代码更容易编写，使类更具扩展性，因为变化都是由新的装饰类来完成。还可以建立连接的装饰对象关系链。<br>需要注意的是，装饰链不宜过长。装饰链太长会使系统花费较长时间用于初始化对象，同时信息在链中的传递也会浪费太多的时间。这个情况好比物品包装，包了一层又一层，大包套小包。另外，如果原来的对象接口发生变化，它所以的装饰类都要修改以匹配它的变化。派生子类会影响对象的内部，而一个Decorator只会影响对象的外表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 手机抽象类，即装饰者模式中的抽象组件类</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public abstract class Phone</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public abstract void Print();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 苹果手机，即装饰着模式中的具体组件类</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class ApplePhone:Phone</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 重写基类方法</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         public override void Print()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;开始执行具体的对象——苹果手机&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 装饰抽象类,要让装饰完全取代抽象组件，所以必须继承自Photo</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public abstract class Decorator:Phone</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         private Phone phone;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public Decorator(Phone p)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.phone = p;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void Print()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             if (phone != null)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 phone.Print();</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 贴膜，即具体装饰者</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class Sticker : Decorator</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public Sticker(Phone p)</span><br><span class="line">&gt;             : base(p)</span><br><span class="line">&gt;         &#123; </span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void Print()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             base.Print();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 添加新的行为</span><br><span class="line">&gt;             AddSticker();      </span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 新的行为方法</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         public void AddSticker()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;现在苹果手机有贴膜了&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 手机挂件</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class Accessories : Decorator</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public Accessories(Phone p)</span><br><span class="line">&gt;             : base(p)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void Print()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             base.Print();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 添加新的行为</span><br><span class="line">&gt;             AddAccessories();          </span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 新的行为方法</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         public void AddAccessories()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;现在苹果手机有漂亮的挂件了&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>10.外观模式（Façade Pattern）</strong><br>外观模式提供了一个简单且公用的接口去处理复杂的子系统，并且没有减少子系统的功能。它遮蔽了子系统的复杂性，避免了客户与子系统直接链接，它也减少了子系统与子系统间的连接，每个子系统都有它的Facade模式，每个子系统采用Facade模式去访问其他子系统。外观模式的劣势就是限制了客户的自由，减少了可变性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">&gt;     // 通过一些简单图形以及一些复杂图形构建图形树来演示组合模式</span><br><span class="line">&gt;     // 客户端调用</span><br><span class="line">&gt;     class Client</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             ComplexGraphics complexGraphics = new ComplexGraphics(&quot;一个复杂图形和两条线段组成的复杂图形&quot;);</span><br><span class="line">&gt;             complexGraphics.Add(new Line(&quot;线段A&quot;));</span><br><span class="line">&gt;             ComplexGraphics CompositeCG = new ComplexGraphics(&quot;一个圆和一条线组成的复杂图形&quot;);</span><br><span class="line">&gt;             CompositeCG.Add(new Circle(&quot;圆&quot;));</span><br><span class="line">&gt;             CompositeCG.Add(new Circle(&quot;线段B&quot;));</span><br><span class="line">&gt;             complexGraphics.Add(CompositeCG);</span><br><span class="line">&gt;             Line l = new Line(&quot;线段C&quot;);</span><br><span class="line">&gt;             complexGraphics.Add(l);</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 显示复杂图形的画法</span><br><span class="line">&gt;             Console.WriteLine(&quot;复杂图形的绘制如下：&quot;);</span><br><span class="line">&gt;             Console.WriteLine(&quot;---------------------&quot;);</span><br><span class="line">&gt;             complexGraphics.Draw();</span><br><span class="line">&gt;             Console.WriteLine(&quot;复杂图形绘制完成&quot;);</span><br><span class="line">&gt;             Console.WriteLine(&quot;---------------------&quot;);</span><br><span class="line">&gt;             Console.WriteLine();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 移除一个组件再显示复杂图形的画法</span><br><span class="line">&gt;             complexGraphics.Remove(l);</span><br><span class="line">&gt;             Console.WriteLine(&quot;移除线段C后，复杂图形的绘制如下：&quot;);</span><br><span class="line">&gt;             Console.WriteLine(&quot;---------------------&quot;);</span><br><span class="line">&gt;             complexGraphics.Draw();</span><br><span class="line">&gt;             Console.WriteLine(&quot;复杂图形绘制完成&quot;);</span><br><span class="line">&gt;             Console.WriteLine(&quot;---------------------&quot;);</span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 图形抽象类，</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public abstract class Graphics</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public string Name &#123; get; set; &#125;</span><br><span class="line">&gt;         public Graphics(string name)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.Name = name;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public abstract void Draw();</span><br><span class="line">&gt;         public abstract void Add(Graphics g);</span><br><span class="line">&gt;         public abstract void Remove(Graphics g);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 简单图形类——线</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class Line : Graphics</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public Line(string name)</span><br><span class="line">&gt;             : base(name)</span><br><span class="line">&gt;         &#123; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 重写父类抽象方法</span><br><span class="line">&gt;         public override void Draw()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;画  &quot; + Name);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         // 因为简单图形在添加或移除其他图形，所以简单图形Add或Remove方法没有任何意义</span><br><span class="line">&gt;         // 如果客户端调用了简单图形的Add或Remove方法将会在运行时抛出异常</span><br><span class="line">&gt;         // 我们可以在客户端捕获该类移除并处理</span><br><span class="line">&gt;         public override void Add(Graphics g)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             throw new Exception(&quot;不能向简单图形Line添加其他图形&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         public override void Remove(Graphics g)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             throw new Exception(&quot;不能向简单图形Line移除其他图形&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 简单图形类——圆</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class Circle : Graphics</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public Circle(string name)</span><br><span class="line">&gt;             : base(name)</span><br><span class="line">&gt;         &#123; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 重写父类抽象方法</span><br><span class="line">&gt;         public override void Draw()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;画  &quot; + Name);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void Add(Graphics g)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             throw new Exception(&quot;不能向简单图形Circle添加其他图形&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         public override void Remove(Graphics g)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             throw new Exception(&quot;不能向简单图形Circle移除其他图形&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 复杂图形，由一些简单图形组成,这里假设该复杂图形由一个圆两条线组成的复杂图形</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class ComplexGraphics : Graphics</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         private List&lt;Graphics&gt; complexGraphicsList = new List&lt;Graphics&gt;();</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public ComplexGraphics(string name)</span><br><span class="line">&gt;             : base(name)</span><br><span class="line">&gt;         &#123; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 复杂图形的画法</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         public override void Draw()</span><br><span class="line">&gt;         &#123;          </span><br><span class="line">&gt;             foreach (Graphics g in complexGraphicsList)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 g.Draw();</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void Add(Graphics g)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             complexGraphicsList.Add(g);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         public override void Remove(Graphics g)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             complexGraphicsList.Remove(g);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>11.享元模式（Flyweight Pattern）</strong><br>Flyweight模式需要你认真考虑如何能细化对象，以减少处理的对象数量，从而减少存留对象在内存或其他存储设备中的占用量。然而，此模式需要维护大量对象的外部状态，如果外部状态的数据量大，传递、查找、计算这些恶数据会变得非常复杂。当外部和内部的状态很难分清时，不宜采用flyweight模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 客户端调用</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     class Client</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 定义外部状态，例如字母的位置等信息</span><br><span class="line">&gt;             int externalstate = 10;</span><br><span class="line">&gt;             // 初始化享元工厂</span><br><span class="line">&gt;             FlyweightFactory factory = new FlyweightFactory();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 判断是否已经创建了字母A，如果已经创建就直接使用创建的对象A</span><br><span class="line">&gt;             Flyweight fa = factory.GetFlyweight(&quot;A&quot;);</span><br><span class="line">&gt;             if (fa != null)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 // 把外部状态作为享元对象的方法调用参数</span><br><span class="line">&gt;                 fa.Operation(--externalstate);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             // 判断是否已经创建了字母B</span><br><span class="line">&gt;             Flyweight fb = factory.GetFlyweight(&quot;B&quot;);</span><br><span class="line">&gt;             if (fb != null)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 fb.Operation(--externalstate);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             // 判断是否已经创建了字母C</span><br><span class="line">&gt;             Flyweight fc = factory.GetFlyweight(&quot;C&quot;);</span><br><span class="line">&gt;             if (fc != null)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 fc.Operation(--externalstate);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             // 判断是否已经创建了字母D</span><br><span class="line">&gt;             Flyweight fd= factory.GetFlyweight(&quot;D&quot;);</span><br><span class="line">&gt;             if (fd != null)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 fd.Operation(--externalstate);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             else</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 Console.WriteLine(&quot;驻留池中不存在字符串D&quot;);</span><br><span class="line">&gt;                 // 这时候就需要创建一个对象并放入驻留池中</span><br><span class="line">&gt;                 ConcreteFlyweight d = new ConcreteFlyweight(&quot;D&quot;);</span><br><span class="line">&gt;                 factory.flyweights.Add(&quot;D&quot;, d);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     /// 享元工厂，负责创建和管理享元对象</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public class FlyweightFactory</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 最好使用泛型Dictionary&lt;string,Flyweighy&gt;</span><br><span class="line">&gt;         //public Dictionary&lt;string, Flyweight&gt; flyweights = new Dictionary&lt;string, Flyweight&gt;();</span><br><span class="line">&gt;         public Hashtable flyweights = new Hashtable();</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public FlyweightFactory()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             flyweights.Add(&quot;A&quot;, new ConcreteFlyweight(&quot;A&quot;));</span><br><span class="line">&gt;             flyweights.Add(&quot;B&quot;, new ConcreteFlyweight(&quot;B&quot;));</span><br><span class="line">&gt;             flyweights.Add(&quot;C&quot;, new ConcreteFlyweight(&quot;C&quot;));</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public Flyweight GetFlyweight(string key)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt; // 更好的实现如下</span><br><span class="line">&gt;             //Flyweight flyweight = flyweights[key] as Flyweight;</span><br><span class="line">&gt;             //if (flyweight == null)</span><br><span class="line">&gt;             //&#123;</span><br><span class="line">&gt;             //    Console.WriteLine(&quot;驻留池中不存在字符串&quot; + key);</span><br><span class="line">&gt;             //    flyweight = new ConcreteFlyweight(key);</span><br><span class="line">&gt;             //&#125;</span><br><span class="line">&gt;             //return flyweight;</span><br><span class="line">&gt; return flyweights[key] as Flyweight;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     /// &lt;summary&gt;</span><br><span class="line">&gt;     ///  抽象享元类，提供具体享元类具有的方法</span><br><span class="line">&gt;     /// &lt;/summary&gt;</span><br><span class="line">&gt;     public abstract class Flyweight</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public abstract void Operation(int extrinsicstate);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 具体的享元对象，这样我们不把每个字母设计成一个单独的类了，而是作为把共享的字母作为享元对象的内部状态</span><br><span class="line">&gt;     public class ConcreteFlyweight : Flyweight</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 内部状态</span><br><span class="line">&gt;         private string intrinsicstate ;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 构造函数</span><br><span class="line">&gt;         public ConcreteFlyweight(string innerState)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.intrinsicstate = innerState;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         /// &lt;summary&gt;</span><br><span class="line">&gt;         /// 享元类的实例方法</span><br><span class="line">&gt;         /// &lt;/summary&gt;</span><br><span class="line">&gt;         /// &lt;param name=&quot;extrinsicstate&quot;&gt;外部状态&lt;/param&gt;</span><br><span class="line">&gt;         public override void Operation(int extrinsicstate)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;具体实现类: intrinsicstate &#123;0&#125;, extrinsicstate &#123;1&#125;&quot;, intrinsicstate, extrinsicstate);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>12.代理模式（Proxy Pattern）</strong><br>当对象在远程机器上，要通过网络来生成时，速度可能会慢，此时应用Remote Proxy模式，可以掩蔽对象由网络生成的过程，系统的速度会加快；对于大图片的加载，Virtual Proxy模式可以让加载在后台进行，前台用的Proxy对象使得整体运行速度得到优化；Protect Proxy可以验证对真实对象的引用权限。<br>代理模式的缺陷是请求的处理速度会变慢，并且实现Proxy模式需要额外的工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&gt;     // 客户端调用</span><br><span class="line">&gt;     class Client</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 创建一个代理对象并发出请求</span><br><span class="line">&gt;             Person proxy = new Friend();</span><br><span class="line">&gt;             proxy.BuyProduct();</span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 抽象主题角色</span><br><span class="line">&gt;     public abstract class Person</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public abstract void BuyProduct();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     //真实主题角色</span><br><span class="line">&gt;     public class RealBuyPerson : Person</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override void BuyProduct()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;帮我买一个IPhone和一台苹果电脑&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 代理角色</span><br><span class="line">&gt;     public class Friend:Person</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 引用真实主题实例</span><br><span class="line">&gt;         RealBuyPerson realSubject;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void BuyProduct()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;通过代理类访问真实实体对象的方法&quot;);</span><br><span class="line">&gt;             if (realSubject == null)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 realSubject = new RealBuyPerson();</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;             this.PreBuyProduct();</span><br><span class="line">&gt;             // 调用真实主题方法</span><br><span class="line">&gt;             realSubject.BuyProduct();</span><br><span class="line">&gt;             this.PostBuyProduct();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 代理角色执行的一些操作</span><br><span class="line">&gt;         public void PreBuyProduct()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 可能不知一个朋友叫这位朋友带东西，首先这位出国的朋友要对每一位朋友要带的东西列一个清单等</span><br><span class="line">&gt;             Console.WriteLine(&quot;我怕弄糊涂了，需要列一张清单，张三：要带相机，李四：要带Iphone...........&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         </span><br><span class="line">&gt;         // 买完东西之后，代理角色需要针对每位朋友需要的对买来的东西进行分类</span><br><span class="line">&gt;         public void PostBuyProduct()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;终于买完了，现在要对东西分一下，相机是张三的；Iphone是李四的..........&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>13.行为型模式</strong><br>职责链模式（Chain of Responsibility）<br>责任链模式可以减少对象的连接，为对象责任分配增加了很大的灵活性。该模式允许把一组类作为一个类来使用，并且在类的组合中，一个类的事件可以发送到另一个类并由其处理。<br>责任链模式通常应用与图形用户界面中，窗体的部件可能会包含其他几个小部件，就如同Windows窗体应用程序中，控件中又可以放置其他控件，控件边界会决定是否处理事件，或者将事件传递给父控件来处理。<br>另外，责任链还会以树状出现，这样，一个事件可以传给多个类，或者，多个类的信息可以提交到一个类。树状责任链能够提供更灵活的技巧，但缺点是信息在树中容易迷失。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">&gt; namespace ChainofResponsibility</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     // 采购请求</span><br><span class="line">&gt;     public class PurchaseRequest</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 金额</span><br><span class="line">&gt;         public double Amount &#123; get; set; &#125;</span><br><span class="line">&gt;         // 产品名字</span><br><span class="line">&gt;         public string ProductName &#123; get; set; &#125;</span><br><span class="line">&gt;         public PurchaseRequest(double amount, string productName)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Amount = amount;</span><br><span class="line">&gt;             ProductName = productName;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 审批人,Handler</span><br><span class="line">&gt;     public abstract class Approver</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public Approver NextApprover &#123; get; set; &#125;</span><br><span class="line">&gt;         public string Name &#123; get; set; &#125;</span><br><span class="line">&gt;         public Approver(string name)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.Name = name;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         public abstract void ProcessRequest(PurchaseRequest request);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // ConcreteHandler</span><br><span class="line">&gt;     public class Manager : Approver</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public Manager(string name)</span><br><span class="line">&gt;             : base(name)</span><br><span class="line">&gt;         &#123; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void ProcessRequest(PurchaseRequest request)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             if (request.Amount &lt; 10000.0)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 Console.WriteLine(&quot;&#123;0&#125;-&#123;1&#125; approved the request of purshing &#123;2&#125;&quot;, this, Name, request.ProductName);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             else if (NextApprover != null)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 NextApprover.ProcessRequest(request);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // ConcreteHandler,副总</span><br><span class="line">&gt;     public class VicePresident : Approver</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public VicePresident(string name)</span><br><span class="line">&gt;             : base(name)</span><br><span class="line">&gt;         &#123; </span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         public override void ProcessRequest(PurchaseRequest request)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             if (request.Amount &lt; 25000.0)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 Console.WriteLine(&quot;&#123;0&#125;-&#123;1&#125; approved the request of purshing &#123;2&#125;&quot;, this, Name, request.ProductName);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             else if (NextApprover != null)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 NextApprover.ProcessRequest(request);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // ConcreteHandler，总经理</span><br><span class="line">&gt;     public class President :Approver</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public President(string name)</span><br><span class="line">&gt;             : base(name)</span><br><span class="line">&gt;         &#123; &#125;</span><br><span class="line">&gt;         public override void ProcessRequest(PurchaseRequest request)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             if (request.Amount &lt; 100000.0)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 Console.WriteLine(&quot;&#123;0&#125;-&#123;1&#125; approved the request of purshing &#123;2&#125;&quot;, this, Name, request.ProductName);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             else</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 Console.WriteLine(&quot;Request需要组织一个会议讨论&quot;);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     class Program</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             PurchaseRequest requestTelphone = new PurchaseRequest(4000.0, &quot;Telphone&quot;);</span><br><span class="line">&gt;             PurchaseRequest requestSoftware = new PurchaseRequest(10000.0, &quot;Visual Studio&quot;);</span><br><span class="line">&gt;             PurchaseRequest requestComputers = new PurchaseRequest(40000.0, &quot;Computers&quot;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Approver manager = new Manager(&quot;LearningHard&quot;);</span><br><span class="line">&gt;             Approver Vp = new VicePresident(&quot;Tony&quot;);</span><br><span class="line">&gt;             Approver Pre = new President(&quot;BossTom&quot;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 设置责任链</span><br><span class="line">&gt;             manager.NextApprover = Vp;</span><br><span class="line">&gt;             Vp.NextApprover = Pre;</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 处理请求</span><br><span class="line">&gt;             manager.ProcessRequest(requestTelphone);</span><br><span class="line">&gt;             manager.ProcessRequest(requestSoftware);</span><br><span class="line">&gt;             manager.ProcessRequest(requestComputers);</span><br><span class="line">&gt;             Console.ReadLine();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>14.命令模式（Command Pattern）</strong><br>命令模式分离了接受请求的对象与实现处理请求工作的对象，这样，已经存在的类可以保持不变，使得增加新类的工作更简单。例如，很多软件的宏命令就提高了系统的自动化程度。<br>命令模式还可以分离用户界面和业务对象，降低系统的耦合度。<br>但是，命令模式最主要的缺陷就是，类的数量增加了，系统变得更复杂，程序的调试工作也相应变得困难。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&gt;     // 教官，负责调用命令对象执行请求</span><br><span class="line">&gt;     public class Invoke</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public Command _command;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public Invoke(Command command)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this._command = command;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public void ExecuteCommand()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             _command.Action();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 命令抽象类</span><br><span class="line">&gt;     public abstract class Command </span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 命令应该知道接收者是谁，所以有Receiver这个成员变量</span><br><span class="line">&gt;         protected Receiver _receiver;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public Command(Receiver receiver)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this._receiver = receiver;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 命令执行方法</span><br><span class="line">&gt;         public abstract void Action();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // </span><br><span class="line">&gt;     public class ConcreteCommand :Command</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public ConcreteCommand(Receiver receiver)</span><br><span class="line">&gt;             : base(receiver)</span><br><span class="line">&gt;         &#123; </span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void Action()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 调用接收的方法，因为执行命令的是学生</span><br><span class="line">&gt;             _receiver.Run1000Meters();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 命令接收者——学生</span><br><span class="line">&gt;     public class Receiver</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public void Run1000Meters()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;跑1000米&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 院领导</span><br><span class="line">&gt;     class Program</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 初始化Receiver、Invoke和Command</span><br><span class="line">&gt;             Receiver r = new Receiver();</span><br><span class="line">&gt;             Command c = new ConcreteCommand(r);</span><br><span class="line">&gt;             Invoke i = new Invoke(c);</span><br><span class="line">&gt;             </span><br><span class="line">&gt;             // 院领导发出命令</span><br><span class="line">&gt;             i.ExecuteCommand();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>15.解释器模式（Interpreter Pattern）</strong><br>解释器模式的作用很强大，它使得改变和扩展文法变得容易，实现文法也变得简单明了，很多编译器，包括文本编辑器、网页浏览器及VRML都应用解释器模式。<br>解释器模式的缺陷就是，因为文句会分析成树结构，解释器需要递归访问它，所以效率会受影响。这种情况开发人员会有所体会，编译整个工程源码耗费时间都比较长。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line">&gt; namespace InterpreterPattern</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     // 抽象表达式</span><br><span class="line">&gt;     public abstract class Expression</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         protected Dictionary&lt;string, int&gt; table = new Dictionary&lt;string, int&gt;(9);</span><br><span class="line">&gt; </span><br><span class="line">&gt;         protected Expression()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             table.Add(&quot;一&quot;, 1);</span><br><span class="line">&gt;             table.Add(&quot;二&quot;, 2);</span><br><span class="line">&gt;             table.Add(&quot;三&quot;, 3);</span><br><span class="line">&gt;             table.Add(&quot;四&quot;, 4);</span><br><span class="line">&gt;             table.Add(&quot;五&quot;, 5);</span><br><span class="line">&gt;             table.Add(&quot;六&quot;, 6);</span><br><span class="line">&gt;             table.Add(&quot;七&quot;, 7);</span><br><span class="line">&gt;             table.Add(&quot;八&quot;, 8);</span><br><span class="line">&gt;             table.Add(&quot;九&quot;, 9);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public virtual void Interpreter(Context context)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             if (context.Statement.Length == 0)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 return;</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;             foreach (string key in table.Keys)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 int value = table[key];</span><br><span class="line">&gt; </span><br><span class="line">&gt;                 if (context.Statement.EndsWith(key + GetPostFix()))</span><br><span class="line">&gt;                 &#123;</span><br><span class="line">&gt;                     context.Data += value * this.Multiplier();</span><br><span class="line">&gt;                     context.Statement = context.Statement.Substring(0, context.Statement.Length - this.GetLength());</span><br><span class="line">&gt;                 &#125;</span><br><span class="line">&gt;                 if (context.Statement.EndsWith(&quot;零&quot;))</span><br><span class="line">&gt;                 &#123;</span><br><span class="line">&gt;                     context.Statement = context.Statement.Substring(0, context.Statement.Length - 1);</span><br><span class="line">&gt;                 &#125;</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public abstract string GetPostFix();</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public abstract int Multiplier();</span><br><span class="line">&gt; </span><br><span class="line">&gt;         //这个可以通用，但是对于个位数字例外，所以用虚方法</span><br><span class="line">&gt;         public virtual int GetLength()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return this.GetPostFix().Length + 1;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     //个位表达式</span><br><span class="line">&gt;     public sealed class GeExpression : Expression</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override string GetPostFix()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return &quot;&quot;;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override int Multiplier()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return 1;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override int GetLength()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return 1;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     //十位表达式</span><br><span class="line">&gt;     public sealed class ShiExpression : Expression</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override string GetPostFix()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return &quot;十&quot;;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override int Multiplier()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return 10;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     //百位表达式</span><br><span class="line">&gt;     public sealed class BaiExpression : Expression</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override string GetPostFix()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return &quot;百&quot;;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override int Multiplier()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return 100;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     //千位表达式</span><br><span class="line">&gt;     public sealed class QianExpression : Expression</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override string GetPostFix()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return &quot;千&quot;;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override int Multiplier()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return 1000;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     //万位表达式</span><br><span class="line">&gt;     public sealed class WanExpression : Expression</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override string GetPostFix()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return &quot;万&quot;;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override int Multiplier()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return 10000;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void Interpreter(Context context)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             if (context.Statement.Length == 0)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 return;</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;             ArrayList tree = new ArrayList();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             tree.Add(new GeExpression());</span><br><span class="line">&gt;             tree.Add(new ShiExpression());</span><br><span class="line">&gt;             tree.Add(new BaiExpression());</span><br><span class="line">&gt;             tree.Add(new QianExpression());</span><br><span class="line">&gt; </span><br><span class="line">&gt;             foreach (string key in table.Keys)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 if (context.Statement.EndsWith(GetPostFix()))</span><br><span class="line">&gt;                 &#123;</span><br><span class="line">&gt;                     int temp = context.Data;</span><br><span class="line">&gt;                     context.Data = 0;</span><br><span class="line">&gt; </span><br><span class="line">&gt;                     context.Statement = context.Statement.Substring(0, context.Statement.Length - this.GetLength());</span><br><span class="line">&gt; </span><br><span class="line">&gt;                     foreach (Expression exp in tree)</span><br><span class="line">&gt;                     &#123;</span><br><span class="line">&gt;                         exp.Interpreter(context);</span><br><span class="line">&gt;                     &#125;</span><br><span class="line">&gt;                     context.Data = temp + context.Data * this.Multiplier();</span><br><span class="line">&gt;                 &#125;</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     //亿位表达式</span><br><span class="line">&gt;     public sealed class YiExpression : Expression</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override string GetPostFix()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return &quot;亿&quot;;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override int Multiplier()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return 100000000;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void Interpreter(Context context)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             ArrayList tree = new ArrayList();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             tree.Add(new GeExpression());</span><br><span class="line">&gt;             tree.Add(new ShiExpression());</span><br><span class="line">&gt;             tree.Add(new BaiExpression());</span><br><span class="line">&gt;             tree.Add(new QianExpression());</span><br><span class="line">&gt; </span><br><span class="line">&gt;             foreach (string key in table.Keys)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 if (context.Statement.EndsWith(GetPostFix()))</span><br><span class="line">&gt;                 &#123;</span><br><span class="line">&gt;                     int temp = context.Data;</span><br><span class="line">&gt;                     context.Data = 0;</span><br><span class="line">&gt;                     context.Statement = context.Statement.Substring(0, context.Statement.Length - this.GetLength());</span><br><span class="line">&gt; </span><br><span class="line">&gt;                     foreach (Expression exp in tree)</span><br><span class="line">&gt;                     &#123;</span><br><span class="line">&gt;                         exp.Interpreter(context);</span><br><span class="line">&gt;                     &#125;</span><br><span class="line">&gt;                     context.Data = temp + context.Data * this.Multiplier();</span><br><span class="line">&gt;                 &#125;</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     //环境上下文</span><br><span class="line">&gt;     public sealed class Context</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         private string _statement;</span><br><span class="line">&gt;         private int _data;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public Context(string statement)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this._statement = statement;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public string Statement</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             get &#123; return this._statement; &#125;</span><br><span class="line">&gt;             set &#123; this._statement = value; &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public int Data</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             get &#123; return this._data; &#125;</span><br><span class="line">&gt;             set &#123; this._data = value; &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     class Program</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             string roman = &quot;五亿七千三百零二万六千四百五十二&quot;;</span><br><span class="line">&gt;             //分解：((五)亿)((七千)(三百)(零)(二)万)</span><br><span class="line">&gt;             //((六千)(四百)(五十)(二))</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Context context = new Context(roman);</span><br><span class="line">&gt;             ArrayList tree = new ArrayList();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             tree.Add(new GeExpression());</span><br><span class="line">&gt;             tree.Add(new ShiExpression());</span><br><span class="line">&gt;             tree.Add(new BaiExpression());</span><br><span class="line">&gt;             tree.Add(new QianExpression());</span><br><span class="line">&gt;             tree.Add(new WanExpression());</span><br><span class="line">&gt;             tree.Add(new YiExpression());</span><br><span class="line">&gt; </span><br><span class="line">&gt;             foreach (Expression exp in tree)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 exp.Interpreter(context);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Console.Write(context.Data);</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>16.模版方法模式（Template Method）</strong><br>模版方法模式在一个类中形式化地定义算法，而由它的子类实现细节的处理。模版方法模式的优势是，在子类定义处理算法时不会改变算法的结构。<br>模版方法的特点在于，每个不同的实现都需要定义一个子类，这也复合高内聚的责任分配模式，不能说成是它的缺点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&gt;     // 客户端调用</span><br><span class="line">&gt;     class Client</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 创建一个菠菜实例并调用模板方法</span><br><span class="line">&gt;             Spinach spinach = new Spinach();</span><br><span class="line">&gt;             spinach.CookVegetabel();</span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     public abstract class Vegetabel</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 模板方法，不要把模版方法定义为Virtual或abstract方法，避免被子类重写，防止更改流程的执行顺序</span><br><span class="line">&gt;         public  void CookVegetabel()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;抄蔬菜的一般做法&quot;);</span><br><span class="line">&gt;             this.pourOil();</span><br><span class="line">&gt;             this.HeatOil();</span><br><span class="line">&gt;             this.pourVegetable();</span><br><span class="line">&gt;             this.stir_fry();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 第一步倒油</span><br><span class="line">&gt;         public  void pourOil()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;倒油&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 把油烧热</span><br><span class="line">&gt;         public  void HeatOil()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;把油烧热&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 油热了之后倒蔬菜下去，具体哪种蔬菜由子类决定</span><br><span class="line">&gt;         public abstract void pourVegetable();</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 开发翻炒蔬菜</span><br><span class="line">&gt;         public  void stir_fry()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;翻炒&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 菠菜</span><br><span class="line">&gt;     public class Spinach : Vegetabel</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;        </span><br><span class="line">&gt;         public override void pourVegetable()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;倒菠菜进锅中&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 大白菜</span><br><span class="line">&gt;     public class ChineseCabbage : Vegetabel</span><br><span class="line">&gt;     &#123;      </span><br><span class="line">&gt;         public override void pourVegetable()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;倒大白菜进锅中&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>17.迭代器模式（Iterator Pattern）</strong><br>迭代器模式支持在聚集中移动游标，使得访问聚合中的元素变得简单，简化了聚集的接口，封装了聚合的对象。<br>迭代器模式还可以应用于对树结构的访问，程序不需要从头逐行代码查找相应位置，可控制到从子集开始查找，对于加快程序的运行速度有很重要的作用。<br>迭代器模式的缺点是聚合密切相关，增加了耦合。但将这种耦合定义在抽象基类，可解决这个问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">&gt;     // 抽象聚合类</span><br><span class="line">&gt;     public interface IListCollection</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         Iterator GetIterator();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 迭代器抽象类</span><br><span class="line">&gt;     public interface Iterator</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         bool MoveNext();</span><br><span class="line">&gt;         Object GetCurrent();</span><br><span class="line">&gt;         void Next();</span><br><span class="line">&gt;         void Reset();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 具体聚合类</span><br><span class="line">&gt;     public class ConcreteList : IListCollection</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         int[] collection;</span><br><span class="line">&gt;         public ConcreteList()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             collection = new int[] &#123; 2, 4, 6, 8 &#125;;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public Iterator GetIterator()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return new ConcreteIterator(this);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public int Length</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             get &#123; return collection.Length; &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public int GetElement(int index)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return collection[index];</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 具体迭代器类</span><br><span class="line">&gt;     public class ConcreteIterator : Iterator</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 迭代器要集合对象进行遍历操作，自然就需要引用集合对象</span><br><span class="line">&gt;         private ConcreteList _list;</span><br><span class="line">&gt;         private int _index;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public ConcreteIterator(ConcreteList list)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             _list = list;</span><br><span class="line">&gt;             _index = 0;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt; </span><br><span class="line">&gt;         public bool MoveNext()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             if (_index &lt; _list.Length)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 return true;</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             return false;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public Object GetCurrent()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return _list.GetElement(_index);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public void Reset()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             _index = 0;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public void Next()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             if (_index &lt; _list.Length)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 _index++;</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;                 </span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     // 客户端</span><br><span class="line">&gt;     class Program</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Iterator iterator;</span><br><span class="line">&gt;             IListCollection list = new ConcreteList();</span><br><span class="line">&gt;             iterator = list.GetIterator();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             while (iterator.MoveNext())</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 int i = (int)iterator.GetCurrent();</span><br><span class="line">&gt;                 Console.WriteLine(i.ToString());</span><br><span class="line">&gt;                 iterator.Next();</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>18.观察者模式（Oberver Pattern）</strong><br>观察者模式抽象了被观察对象与观察者对象的连接，提供了广播式的对象间通信，并且容易增加新的观察者对象。观察者模式的缺陷是对象间的关系难以理解，在某种情况下会表现低效能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&gt; // 腾讯游戏订阅号类</span><br><span class="line">&gt;     public class TenxunGame</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 订阅者对象</span><br><span class="line">&gt;         public Subscriber Subscriber &#123;get;set;&#125; </span><br><span class="line">&gt; </span><br><span class="line">&gt;         public String Symbol &#123;get; set;&#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public string Info &#123;get ;set;&#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public void Update()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             if (Subscriber != null)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 // 调用订阅者对象来通知订阅者</span><br><span class="line">&gt;                 Subscriber.ReceiveAndPrintData(this);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     // 订阅者类</span><br><span class="line">&gt;     public class Subscriber</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public string Name &#123; get; set; &#125;</span><br><span class="line">&gt;         public Subscriber(string name)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.Name = name;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public void ReceiveAndPrintData(TenxunGame txGame)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;Notified &#123;0&#125; of &#123;1&#125;&apos;s&quot; + &quot; Info is: &#123;2&#125;&quot;, Name, txGame.Symbol, txGame.Info);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;     // 客户端测试</span><br><span class="line">&gt;     class Program</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 实例化订阅者和订阅号对象</span><br><span class="line">&gt;             Subscriber LearningHardSub = new Subscriber(&quot;LearningHard&quot;);</span><br><span class="line">&gt;             TenxunGame txGame = new TenxunGame();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             txGame.Subscriber = LearningHardSub;</span><br><span class="line">&gt;             txGame.Symbol = &quot;TenXun Game&quot;;</span><br><span class="line">&gt;             txGame.Info = &quot;Have a new game published ....&quot;;</span><br><span class="line">&gt; </span><br><span class="line">&gt;             txGame.Update();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Console.ReadLine();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>19.中介者模式（Mediator Pattern）</strong><br>中介者模式分离了两个同事类，简化了对象协议，中央控制对象交互，从而使个体对象变得更容易且更简单，因为它不需要传递数据给其他个体对象，仅仅传给中介者就可以了。个体对象不需要具有处理内部交流的逻辑，所以更加突出它的面向对象特性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&gt;     // 抽象牌友类</span><br><span class="line">&gt;     public abstract class AbstractCardPartner</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public int MoneyCount &#123; get; set; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public AbstractCardPartner()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             MoneyCount = 0;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public abstract void ChangeCount(int Count, AbstractCardPartner other);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 牌友A类</span><br><span class="line">&gt;     public class ParterA : AbstractCardPartner</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override void ChangeCount(int Count, AbstractCardPartner other)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.MoneyCount += Count;</span><br><span class="line">&gt;             other.MoneyCount -= Count;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 牌友B类</span><br><span class="line">&gt;     public class ParterB : AbstractCardPartner</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override void ChangeCount(int Count, AbstractCardPartner other)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.MoneyCount += Count;</span><br><span class="line">&gt;             other.MoneyCount -= Count;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     class Program</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // A,B两个人打牌</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             AbstractCardPartner A = new ParterA();</span><br><span class="line">&gt;             A.MoneyCount = 20;</span><br><span class="line">&gt;             AbstractCardPartner B = new ParterB();</span><br><span class="line">&gt;             B.MoneyCount = 20;</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // A 赢了则B的钱就减少</span><br><span class="line">&gt;             A.ChangeCount(5, B);</span><br><span class="line">&gt;             Console.WriteLine(&quot;A 现在的钱是：&#123;0&#125;&quot;, A.MoneyCount);// 应该是25</span><br><span class="line">&gt;             Console.WriteLine(&quot;B 现在的钱是：&#123;0&#125;&quot;, B.MoneyCount); // 应该是15</span><br><span class="line">&gt;             </span><br><span class="line">&gt;             // B赢了A的钱也减少</span><br><span class="line">&gt;             B.ChangeCount(10, A);</span><br><span class="line">&gt;             Console.WriteLine(&quot;A 现在的钱是：&#123;0&#125;&quot;, A.MoneyCount); // 应该是15</span><br><span class="line">&gt;             Console.WriteLine(&quot;B 现在的钱是：&#123;0&#125;&quot;, B.MoneyCount); // 应该是25</span><br><span class="line">&gt;             Console.Read();        </span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>20.备忘录模式（Memento Pattern）</strong><br>Memento模式保存了封装的边界，一个Memento对象是另一种原发器对象的表示，不会被其他代码改动。这种模式简化了原发器对象，Memento只保存原发器的状态。采用堆栈备忘对象，可以实现多次取消操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&gt;     // 联系人</span><br><span class="line">&gt;     public class ContactPerson</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public string Name &#123; get; set; &#125;</span><br><span class="line">&gt;         public string MobileNum &#123; get; set; &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 发起人</span><br><span class="line">&gt;     public class MobileOwner</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 发起人需要保存的内部状态</span><br><span class="line">&gt;         public List&lt;ContactPerson&gt; ContactPersons &#123; get; set; &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public MobileOwner(List&lt;ContactPerson&gt; persons)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             ContactPersons = persons;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 创建备忘录，将当期要保存的联系人列表导入到备忘录中 </span><br><span class="line">&gt;         public ContactMemento CreateMemento()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 这里也应该传递深拷贝，new List方式传递的是浅拷贝，</span><br><span class="line">&gt;             // 因为ContactPerson类中都是string类型,所以这里new list方式对ContactPerson对象执行了深拷贝</span><br><span class="line">&gt;             // 如果ContactPerson包括非string的引用类型就会有问题，所以这里也应该用序列化传递深拷贝</span><br><span class="line">&gt;             return new ContactMemento(new List&lt;ContactPerson&gt;(this.ContactPersons));</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 将备忘录中的数据备份导入到联系人列表中</span><br><span class="line">&gt;         public void RestoreMemento(ContactMemento memento)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 下面这种方式是错误的，因为这样传递的是引用，</span><br><span class="line">&gt;             // 则删除一次可以恢复，但恢复之后再删除的话就恢复不了.</span><br><span class="line">&gt;             // 所以应该传递contactPersonBack的深拷贝，深拷贝可以使用序列化来完成</span><br><span class="line">&gt;             this.ContactPersons = memento.contactPersonBack;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public void Show()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;联系人列表中有&#123;0&#125;个人，他们是:&quot;, ContactPersons.Count);</span><br><span class="line">&gt;             foreach (ContactPerson p in ContactPersons)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 Console.WriteLine(&quot;姓名: &#123;0&#125; 号码为: &#123;1&#125;&quot;, p.Name, p.MobileNum);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 备忘录</span><br><span class="line">&gt;     public class ContactMemento</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // 保存发起人的内部状态</span><br><span class="line">&gt;         public List&lt;ContactPerson&gt; contactPersonBack;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public ContactMemento(List&lt;ContactPerson&gt; persons)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             contactPersonBack = persons;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 管理角色</span><br><span class="line">&gt;     public class Caretaker</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public ContactMemento ContactM &#123; get; set; &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     class Program</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             List&lt;ContactPerson&gt; persons = new List&lt;ContactPerson&gt;()</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 new ContactPerson() &#123; Name= &quot;Learning Hard&quot;, MobileNum = &quot;123445&quot;&#125;,</span><br><span class="line">&gt;                 new ContactPerson() &#123; Name = &quot;Tony&quot;, MobileNum = &quot;234565&quot;&#125;,</span><br><span class="line">&gt;                 new ContactPerson() &#123; Name = &quot;Jock&quot;, MobileNum = &quot;231455&quot;&#125;</span><br><span class="line">&gt;             &#125;;</span><br><span class="line">&gt;             MobileOwner mobileOwner = new MobileOwner(persons);</span><br><span class="line">&gt;             mobileOwner.Show();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 创建备忘录并保存备忘录对象</span><br><span class="line">&gt;             Caretaker caretaker = new Caretaker();</span><br><span class="line">&gt;             caretaker.ContactM = mobileOwner.CreateMemento();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 更改发起人联系人列表</span><br><span class="line">&gt;             Console.WriteLine(&quot;----移除最后一个联系人--------&quot;);</span><br><span class="line">&gt;             mobileOwner.ContactPersons.RemoveAt(2);</span><br><span class="line">&gt;             mobileOwner.Show();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 恢复到原始状态</span><br><span class="line">&gt;             Console.WriteLine(&quot;-------恢复联系人列表------&quot;);</span><br><span class="line">&gt;             mobileOwner.RestoreMemento(caretaker.ContactM);</span><br><span class="line">&gt;             mobileOwner.Show();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>21.状态模式（State Pattern）</strong><br>状态模式在对象内保存特定的状态并且就不同的状态履行不同的行为，它使状态的变化显得清晰明了，也很容易创建对象的新状态。<br>状态模式在工作流或游戏等各种系统中大量使用，例如在政府OA系统中，一个批文的状态有多种：未办、正在处理、正在批示、正在审核和已经完成等各种状态。在网络游戏中，一个游戏活动存在开始、开玩、正在玩、输赢等各种状态。使用状态模式就可以实现游戏状态的总控，而游戏状态决定了游戏的各个方面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line">&gt; namespace StatePatternSample</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     public class Account</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public State State &#123;get;set;&#125;</span><br><span class="line">&gt;         public string Owner &#123; get; set; &#125;</span><br><span class="line">&gt;         public Account(string owner)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.Owner = owner;</span><br><span class="line">&gt;             this.State = new SilverState(0.0, this);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public double Balance &#123; get &#123;return State.Balance; &#125;&#125; // 余额</span><br><span class="line">&gt;         // 存钱</span><br><span class="line">&gt;         public void Deposit(double amount)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             State.Deposit(amount);</span><br><span class="line">&gt;             Console.WriteLine(&quot;存款金额为 &#123;0:C&#125;——&quot;, amount);</span><br><span class="line">&gt;             Console.WriteLine(&quot;账户余额为 =:&#123;0:C&#125;&quot;, this.Balance);</span><br><span class="line">&gt;             Console.WriteLine(&quot;账户状态为: &#123;0&#125;&quot;, this.State.GetType().Name);</span><br><span class="line">&gt;             Console.WriteLine();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 取钱</span><br><span class="line">&gt;         public void Withdraw(double amount)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             State.Withdraw(amount);</span><br><span class="line">&gt;              Console.WriteLine(&quot;取款金额为 &#123;0:C&#125;——&quot;,amount);</span><br><span class="line">&gt;             Console.WriteLine(&quot;账户余额为 =:&#123;0:C&#125;&quot;, this.Balance);</span><br><span class="line">&gt;             Console.WriteLine(&quot;账户状态为: &#123;0&#125;&quot;, this.State.GetType().Name);</span><br><span class="line">&gt;             Console.WriteLine();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 获得利息</span><br><span class="line">&gt;         public void PayInterest()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             State.PayInterest();</span><br><span class="line">&gt;             Console.WriteLine(&quot;Interest Paid --- &quot;);</span><br><span class="line">&gt;             Console.WriteLine(&quot;账户余额为 =:&#123;0:C&#125;&quot;, this.Balance);</span><br><span class="line">&gt;             Console.WriteLine(&quot;账户状态为: &#123;0&#125;&quot;, this.State.GetType().Name);</span><br><span class="line">&gt;             Console.WriteLine();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 抽象状态类</span><br><span class="line">&gt;     public abstract class State</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         // Properties</span><br><span class="line">&gt;         public Account Account &#123; get; set; &#125;</span><br><span class="line">&gt;         public double Balance &#123; get; set; &#125; // 余额</span><br><span class="line">&gt;         public double Interest &#123; get; set; &#125; // 利率</span><br><span class="line">&gt;         public double LowerLimit &#123; get; set; &#125; // 下限</span><br><span class="line">&gt;         public double UpperLimit &#123; get; set; &#125; // 上限</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public abstract void Deposit(double amount); // 存款</span><br><span class="line">&gt;         public abstract void Withdraw(double amount); // 取钱</span><br><span class="line">&gt;         public abstract void PayInterest(); // 获得的利息</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // Red State意味着Account透支了</span><br><span class="line">&gt;     public class RedState : State</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public RedState(State state)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // Initialize</span><br><span class="line">&gt;             this.Balance = state.Balance;</span><br><span class="line">&gt;             this.Account = state.Account;</span><br><span class="line">&gt;             Interest = 0.00;</span><br><span class="line">&gt;             LowerLimit = -100.00;</span><br><span class="line">&gt;             UpperLimit = 0.00;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         // 存款</span><br><span class="line">&gt;         public override void Deposit(double amount)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Balance += amount;</span><br><span class="line">&gt;             StateChangeCheck();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         // 取钱</span><br><span class="line">&gt;         public override void Withdraw(double amount)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;没有钱可以取了！&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void PayInterest()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 没有利息</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         private void StateChangeCheck()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             if (Balance &gt; UpperLimit)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 Account.State = new SilverState(this);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // Silver State意味着没有利息得</span><br><span class="line">&gt;     public class SilverState :State</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public SilverState(State state)</span><br><span class="line">&gt;             : this(state.Balance, state.Account)</span><br><span class="line">&gt;         &#123; </span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public SilverState(double balance, Account account)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.Balance = balance;</span><br><span class="line">&gt;             this.Account = account;</span><br><span class="line">&gt;             Interest = 0.00;</span><br><span class="line">&gt;             LowerLimit = 0.00;</span><br><span class="line">&gt;             UpperLimit = 1000.00;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void Deposit(double amount)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Balance += amount;</span><br><span class="line">&gt;             StateChangeCheck();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         public override void Withdraw(double amount)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Balance -= amount;</span><br><span class="line">&gt;             StateChangeCheck();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public override void PayInterest()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Balance += Interest * Balance;</span><br><span class="line">&gt;             StateChangeCheck();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         private void StateChangeCheck()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             if (Balance &lt; LowerLimit)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 Account.State = new RedState(this);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             else if (Balance &gt; UpperLimit)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 Account.State = new GoldState(this);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;     </span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // Gold State意味着有利息状态</span><br><span class="line">&gt;     public class GoldState : State</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public GoldState(State state)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.Balance = state.Balance;</span><br><span class="line">&gt;             this.Account = state.Account;</span><br><span class="line">&gt;             Interest = 0.05;</span><br><span class="line">&gt;             LowerLimit = 1000.00;</span><br><span class="line">&gt;             UpperLimit = 1000000.00;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         // 存钱</span><br><span class="line">&gt;         public override void Deposit(double amount)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Balance += amount;</span><br><span class="line">&gt;             StateChangeCheck();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         // 取钱</span><br><span class="line">&gt;         public override void Withdraw(double amount)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Balance -= amount;</span><br><span class="line">&gt;             StateChangeCheck();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;         public override void PayInterest()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Balance += Interest * Balance;</span><br><span class="line">&gt;             StateChangeCheck();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         private void StateChangeCheck()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             if (Balance &lt; 0.0)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 Account.State = new RedState(this);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;             else if (Balance &lt; LowerLimit)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 Account.State = new SilverState(this);</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     class App</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 开一个新的账户</span><br><span class="line">&gt;             Account account = new Account(&quot;Learning Hard&quot;);</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 进行交易</span><br><span class="line">&gt;             // 存钱</span><br><span class="line">&gt;             account.Deposit(1000.0);</span><br><span class="line">&gt;             account.Deposit(200.0);</span><br><span class="line">&gt;             account.Deposit(600.0);</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 付利息</span><br><span class="line">&gt;             account.PayInterest();</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 取钱</span><br><span class="line">&gt;             account.Withdraw(2000.00);</span><br><span class="line">&gt;             account.Withdraw(500.00);</span><br><span class="line">&gt;             </span><br><span class="line">&gt;             // 等待用户输入</span><br><span class="line">&gt;             Console.ReadKey();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>22.策略模式（Strategy Pattern）</strong><br>策略模式提供了替代派生的子类，并定义类的每个行为，剔除了代码中条件的判断语句，使得扩展和结合新的行为变得更容易，根本不需要变动应用程序。策略模式可以避免使用多重条件转移语句，系统变得更新灵活。应用策略模式会产生很多子类，这符合高内聚的责任分配模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&gt; namespace StrategyPattern</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     // 所得税计算策略</span><br><span class="line">&gt;     public interface ITaxStragety</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         double CalculateTax(double income);</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 个人所得税</span><br><span class="line">&gt;     public class PersonalTaxStrategy : ITaxStragety</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public double CalculateTax(double income)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return income * 0.12;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 企业所得税</span><br><span class="line">&gt;     public class EnterpriseTaxStrategy : ITaxStragety</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public double CalculateTax(double income)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return (income - 3500) &gt; 0 ? (income - 3500) * 0.045 : 0.0;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     public class InterestOperation</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         private ITaxStragety m_strategy;</span><br><span class="line">&gt;         public InterestOperation(ITaxStragety strategy)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             this.m_strategy = strategy;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public double GetTax(double income)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             return m_strategy.CalculateTax(income);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     class App</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             // 个人所得税方式</span><br><span class="line">&gt;             InterestOperation operation = new InterestOperation(new PersonalTaxStrategy());</span><br><span class="line">&gt;             Console.WriteLine(&quot;个人支付的税为：&#123;0&#125;&quot;, operation.GetTax(5000.00));</span><br><span class="line">&gt; </span><br><span class="line">&gt;             // 企业所得税</span><br><span class="line">&gt;             operation = new InterestOperation(new EnterpriseTaxStrategy());</span><br><span class="line">&gt;             Console.WriteLine(&quot;企业支付的税为：&#123;0&#125;&quot;, operation.GetTax(50000.00));</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>23.访问者模式（Visitor Pattern）</strong><br>Visitor(访问者)模式使得增加新的操作变得容易，它可以收集有关联的方法，而分离没有关联的方法，特别适用于分离因为不同原因而变化的事物，如“在男人中分离出男孩”。但Visitor模式常常要打破对象的封装性，visitor与element需要达成某些共识。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&gt; namespace DonotUsevistorPattern</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;     // 抽象元素角色</span><br><span class="line">&gt;     public abstract class Element</span><br><span class="line">&gt;     &#123;      </span><br><span class="line">&gt;         public abstract void Print();</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 具体元素A</span><br><span class="line">&gt;     public class ElementA : Element</span><br><span class="line">&gt;     &#123;    </span><br><span class="line">&gt;         public override void Print()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;我是元素A&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 具体元素B</span><br><span class="line">&gt;     public class ElementB : Element</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         public override void Print()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Console.WriteLine(&quot;我是元素B&quot;);</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     // 对象结构</span><br><span class="line">&gt;     public class ObjectStructure</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         private ArrayList elements = new ArrayList();</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public ArrayList Elements</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             get &#123; return elements; &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;         public ObjectStructure()</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             Random ran = new Random();</span><br><span class="line">&gt;             for (int i = 0; i &lt; 6; i++)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 int ranNum = ran.Next(10);</span><br><span class="line">&gt;                 if (ranNum &gt; 5)</span><br><span class="line">&gt;                 &#123;</span><br><span class="line">&gt;                     elements.Add(new ElementA());</span><br><span class="line">&gt;                 &#125;</span><br><span class="line">&gt;                 else</span><br><span class="line">&gt;                 &#123;</span><br><span class="line">&gt;                     elements.Add(new ElementB());</span><br><span class="line">&gt;                 &#125;</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     class Program</span><br><span class="line">&gt;     &#123;</span><br><span class="line">&gt;         static void Main(string[] args)</span><br><span class="line">&gt;         &#123;</span><br><span class="line">&gt;             ObjectStructure objectStructure = new ObjectStructure();</span><br><span class="line">&gt;             // 遍历对象结构中的对象集合，访问每个元素的Print方法打印元素信息</span><br><span class="line">&gt;             foreach (Element e in objectStructure.Elements)</span><br><span class="line">&gt;             &#123;</span><br><span class="line">&gt;                 e.Print();</span><br><span class="line">&gt;             &#125;</span><br><span class="line">&gt; </span><br><span class="line">&gt;             Console.Read();</span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.创建型模式&lt;/strong&gt;&lt;br&gt;工厂方法（Factory Method）&lt;br&gt;在工厂方法模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节。工厂方法模式的核心是一个抽象工厂类，各种具体工厂类通过抽象工厂类将工厂方法继承下来。如此使得客户可以只关心抽象产品和抽象工厂，完全不用理会返回的是哪一种具体产品，也不用关系它是如何被具体工厂创建的。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term=".net" scheme="http://tamron.club/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>基于Microsoft Exchange Server发送邮件</title>
    <link href="http://tamron.club/2018/06/28/%E5%9F%BA%E4%BA%8EMicrosoft%20Exchange%20Server%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://tamron.club/2018/06/28/基于Microsoft Exchange Server发送邮件/</id>
    <published>2018-06-28T12:39:34.000Z</published>
    <updated>2018-08-09T17:57:58.702Z</updated>
    
    <content type="html"><![CDATA[<p>由于项目需要需要一个邮件功能，需要将数据库里数据导出Excel并且自动发送邮件的功能，我就在网上查资料。基于SMTP与POP3协议的发送邮件网上代码很多，自己配置了一下可以实现。但是后来为了安全考虑（其实是公司有微软域邮箱），需要采用微软的Exchange Server发送邮件。。。。</p><a id="more"></a> <p>首先我们需要安装一个Microsoft.Exchange.WebServices的Nuget包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 邮件发送服务</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public class MailService</span><br><span class="line">&#123;</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// </span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">public static readonly MailService Instance = new MailService();</span><br><span class="line"></span><br><span class="line">#region 邮件发送</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 邮件服务配置</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static ExchangeService _ExchangeService()</span><br><span class="line">&#123;</span><br><span class="line">ExchangeService service = new ExchangeService(ExchangeVersion.Exchange2007_SP1);</span><br><span class="line">string user = ConfigurationManager.AppSettings[&quot;User&quot;];</span><br><span class="line">string password = ConfigurationManager.AppSettings[&quot;password&quot;];</span><br><span class="line">string domain = ConfigurationManager.AppSettings[&quot;Domain&quot;];</span><br><span class="line">service.Credentials = new NetworkCredential(user, password, domain);</span><br><span class="line">service.TraceEnabled = true;</span><br><span class="line">ServicePointManager.ServerCertificateValidationCallback += CheckCert;</span><br><span class="line">service.AutodiscoverUrl(user+&quot;@sinooceangroup.com&quot;);</span><br><span class="line">return service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 检验证书始终返回true</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;certificate&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;chain&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;sslPolicyErrors&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">protected static bool CheckCert(Object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)</span><br><span class="line">&#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 封装EmailMessage保存封装方法</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;message&quot;&gt;&lt;/param&gt;</span><br><span class="line">public void SendEmail(EmailMessage message)</span><br><span class="line">&#123;</span><br><span class="line">message.Save();</span><br><span class="line">message.SendAndSaveCopy();// 发送</span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure><p>上面是核心代码，接下来是如何调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public IHttpActionResult SendMailTest(string email)</span><br><span class="line">&#123;</span><br><span class="line">var result = ControllerService.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">var service = MailService._ExchangeService();</span><br><span class="line">Microsoft.Exchange.WebServices.Data.EmailMessage message = new Microsoft.Exchange.WebServices.Data.EmailMessage(service);</span><br><span class="line">message.Subject = &quot;测试标题&quot;;</span><br><span class="line">message.Body = new Microsoft.Exchange.WebServices.Data.MessageBody();</span><br><span class="line">message.Body.BodyType = Microsoft.Exchange.WebServices.Data.BodyType.HTML;</span><br><span class="line">var stream = File.OpenRead(HttpRuntime.AppDomainAppPath + &quot;/HtmlTemplate/mail.html&quot;);</span><br><span class="line">StreamReader sr = new StreamReader(stream);</span><br><span class="line">string str = sr.ReadToEnd();//字符串</span><br><span class="line"></span><br><span class="line">message.Body.Text = str;</span><br><span class="line">message.ToRecipients.Add(email);</span><br><span class="line">MailService.Instance.SendEmail(message);</span><br><span class="line">&#125;);</span><br><span class="line">return Ok(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于项目需要需要一个邮件功能，需要将数据库里数据导出Excel并且自动发送邮件的功能，我就在网上查资料。基于SMTP与POP3协议的发送邮件网上代码很多，自己配置了一下可以实现。但是后来为了安全考虑（其实是公司有微软域邮箱），需要采用微软的Exchange Server发送邮件。。。。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="邮件" scheme="http://tamron.club/tags/%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>SMTP协议发送邮件</title>
    <link href="http://tamron.club/2018/06/25/SMTP%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>http://tamron.club/2018/06/25/SMTP发送邮件/</id>
    <published>2018-06-25T08:39:34.000Z</published>
    <updated>2018-07-23T01:12:19.441Z</updated>
    
    <content type="html"><![CDATA[<p>例如A使用163邮箱发送邮件给B(qq邮箱)。首先A会把邮件通过SMTP（Simple Mail Transfer Protocol）协议传输到163的Smtp服务器上，163的Smtp服务器会根据B的邮箱账号，把邮件通过Smtp协议发给QQ邮箱的Smtp服务器。QQ的Smtp服务器接收到邮件消息后会将之存储在QQ邮箱的邮件存储设备上。当B登陆QQ邮箱后，如果有新邮件，POP3服务器就会从QQ邮箱的邮件存储设备上读出邮件并通过POP3/IMAP服务发送给邮件客户端的B。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">private void SendMail()</span><br><span class="line">        &#123;</span><br><span class="line">            //简单邮件传输协议类</span><br><span class="line">            System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();</span><br><span class="line">            client.Host = &quot;smtp.ym.163.com&quot;;//邮件服务器</span><br><span class="line">            client.Port = 25;//smtp主机上的端口号,默认是25.</span><br><span class="line">            client.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;//邮件发送方式:通过网络发送到SMTP服务器</span><br><span class="line">            client.Credentials = new System.Net.NetworkCredential(&quot;登录人邮箱&quot;, &quot;邮箱密码&quot;);//凭证,发件人登录邮箱的用户名和密码</span><br><span class="line"></span><br><span class="line">            //电子邮件信息类</span><br><span class="line">            System.Net.Mail.MailAddress fromAddress = new System.Net.Mail.MailAddress(&quot;发送人邮箱&quot;, &quot;名称&quot;);//发件人Email,在邮箱是这样显示的,[发件人:小明&lt;panthervic@163.com&gt;;]</span><br><span class="line">            System.Net.Mail.MailAddress toAddress = new System.Net.Mail.MailAddress(&quot;收件人邮箱&quot;, &quot;名称&quot;);//收件人Email,在邮箱是这样显示的, [收件人:小红&lt;43327681@163.com&gt;;]</span><br><span class="line">            System.Net.Mail.MailMessage mailMessage = new System.Net.Mail.MailMessage(fromAddress, toAddress);//创建一个电子邮件类</span><br><span class="line">            mailMessage.Subject = &quot;TaskService停止&quot;;</span><br><span class="line">            //string filePath = Server.MapPath(&quot;/index.html&quot;);//邮件的内容可以是一个html文本.</span><br><span class="line">            //System.IO.StreamReader read = new System.IO.StreamReader(filePath, System.Text.Encoding.GetEncoding(&quot;GB2312&quot;));</span><br><span class="line">            //string mailBody = read.ReadToEnd();</span><br><span class="line">            //read.Close();</span><br><span class="line">            //mailMessage.Body = mailBody;//可为html格式文本</span><br><span class="line">            IPHostEntry fromHE = Dns.GetHostEntry(Dns.GetHostName());</span><br><span class="line">            IPEndPoint ipEndPointFrom = new IPEndPoint(fromHE.AddressList[1], 80);</span><br><span class="line">            EndPoint EndPointFrom = (ipEndPointFrom);</span><br><span class="line">            mailMessage.Body = &quot;服务器地址：&quot;+ EndPointFrom;//可为html格式文本</span><br><span class="line">            mailMessage.SubjectEncoding = System.Text.Encoding.UTF8;//邮件主题编码</span><br><span class="line">            mailMessage.BodyEncoding = System.Text.Encoding.UTF8;//邮件内容编码</span><br><span class="line">            mailMessage.IsBodyHtml = true;//邮件内容是否为html格式</span><br><span class="line">            mailMessage.Priority = System.Net.Mail.MailPriority.High;//邮件的优先级,有三个值:高(在邮件主题前有一个红色感叹号,表示紧急),低(在邮件主题前有一个蓝色向下箭头,表示缓慢),正常(无显示).</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                client.Send(mailMessage);//发送邮件</span><br><span class="line">                //client.SendAsync(mailMessage, &quot;ojb&quot;);异步方法发送邮件,不会阻塞线程.</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;例如A使用163邮箱发送邮件给B(qq邮箱)。首先A会把邮件通过SMTP（Simple Mail Transfer Protocol）协议传输到163的Smtp服务器上，163的Smtp服务器会根据B的邮箱账号，把邮件通过Smtp协议发给QQ邮箱的Smtp服务器。QQ的Smtp服务器接收到邮件消息后会将之存储在QQ邮箱的邮件存储设备上。当B登陆QQ邮箱后，如果有新邮件，POP3服务器就会从QQ邮箱的邮件存储设备上读出邮件并通过POP3/IMAP服务发送给邮件客户端的B。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="邮件" scheme="http://tamron.club/tags/%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>ExcelHelper</title>
    <link href="http://tamron.club/2018/05/20/ExcelHelper/"/>
    <id>http://tamron.club/2018/05/20/ExcelHelper/</id>
    <published>2018-05-20T12:39:34.000Z</published>
    <updated>2018-09-03T08:22:56.307Z</updated>
    
    <content type="html"><![CDATA[<p>今天是很有意义的一天，520</p><blockquote><p>需求: Web后台需要做一个Excel导入功能</p></blockquote><blockquote><p>我：看完需求以后，大概得设计Excel7个工作簿模板，9张数据库表</p></blockquote><p>磨刀不误砍柴工，我迫切的需要一个Excel读取得公共类，然后基于强大的百度自己改造了一个。。。</p><a id="more"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 读取Excel数据到DataTable(公共类)</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;fileName&quot;&gt;文件名称 string&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;sheets&quot;&gt;工作簿 int&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;rows&quot;&gt;从第几行读取 int&lt;/param&gt;</span><br><span class="line">/// &lt;param name=&quot;columns&quot;&gt;从第几列读取 int&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public DataTable GetExcelData(string fileName, int sheets, int rows, int columns)</span><br><span class="line">&#123;</span><br><span class="line">DataTable dataTable = new DataTable();</span><br><span class="line">HttpPostedFile postFile = HttpContext.Current.Request.Files[fileName];</span><br><span class="line">if (postFile == null)</span><br><span class="line">&#123;</span><br><span class="line">throw new Exception(&quot;无效的数据源&quot;);</span><br><span class="line">&#125;</span><br><span class="line">string uploadFileName = postFile.FileName;</span><br><span class="line">string path = HttpContext.Current.Server.MapPath(&quot;~/Resources/&quot; + uploadFileName);</span><br><span class="line">postFile.SaveAs(path);</span><br><span class="line">IWorkbook workbook = null;</span><br><span class="line">ISheet sheet = null;</span><br><span class="line">using (FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.Read))</span><br><span class="line">&#123;</span><br><span class="line">if (Path.GetExtension(path).IndexOf(&quot;.xlsx&quot;) &gt;= 0) // 2007版本</span><br><span class="line">&#123;</span><br><span class="line">workbook = new XSSFWorkbook(fileStream);</span><br><span class="line">&#125;</span><br><span class="line">else if (Path.GetExtension(path).IndexOf(&quot;.xls&quot;) &gt;= 0) // 2003版本</span><br><span class="line">&#123;</span><br><span class="line">workbook = new HSSFWorkbook(fileStream);</span><br><span class="line">&#125;</span><br><span class="line">sheet = workbook.GetSheetAt(sheets);</span><br><span class="line">workbook.Close();</span><br><span class="line">&#125;</span><br><span class="line">IRow row;</span><br><span class="line">ICell cell;</span><br><span class="line">// 列名</span><br><span class="line">row = sheet.GetRow(rows);</span><br><span class="line">for (int i = columns; i &lt; row.LastCellNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">cell = row.GetCell(i);</span><br><span class="line">if (cell != null)</span><br><span class="line">&#123;</span><br><span class="line">dataTable.Columns.Add(new DataColumn(cell.ToString()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 数据</span><br><span class="line">for (int i = rows + 1; i &lt;= sheet.LastRowNum; i++)</span><br><span class="line">&#123;</span><br><span class="line">row = sheet.GetRow(i);</span><br><span class="line">if (row != null)</span><br><span class="line">&#123;</span><br><span class="line">DataRow dataRow = dataTable.NewRow();</span><br><span class="line">for (int j = columns; j &lt; dataTable.Columns.Count; ++j)</span><br><span class="line">&#123;</span><br><span class="line">cell = row.GetCell(j);</span><br><span class="line">if (cell != null)</span><br><span class="line">&#123;</span><br><span class="line">dataRow[j] = cell.ToString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dataTable.Rows.Add(dataRow);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (File.Exists(path))</span><br><span class="line">&#123;</span><br><span class="line">File.Delete(path);</span><br><span class="line">&#125;</span><br><span class="line">return dataTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="上述代码的工作流程是将HttpPost请求中from-data参数文件读取到本地，然后根据我传入Excel名称，工作簿索引，行索引，列索引来读取Excel数据转化为Table，然后删除本地Excel文件。"><a href="#上述代码的工作流程是将HttpPost请求中from-data参数文件读取到本地，然后根据我传入Excel名称，工作簿索引，行索引，列索引来读取Excel数据转化为Table，然后删除本地Excel文件。" class="headerlink" title="上述代码的工作流程是将HttpPost请求中from-data参数文件读取到本地，然后根据我传入Excel名称，工作簿索引，行索引，列索引来读取Excel数据转化为Table，然后删除本地Excel文件。"></a>上述代码的工作流程是将HttpPost请求中from-data参数文件读取到本地，然后根据我传入Excel名称，工作簿索引，行索引，列索引来读取Excel数据转化为Table，然后删除本地Excel文件。</h5><h6 id="然后将Table转化为Model操作数据库，完美解决。"><a href="#然后将Table转化为Model操作数据库，完美解决。" class="headerlink" title="然后将Table转化为Model操作数据库，完美解决。"></a>然后将Table转化为Model操作数据库，完美解决。</h6><blockquote><p>但是我在过程中出现了几个问题：</p></blockquote><blockquote><p>1.我在设计模板的时候，时间列（2018-6）我设置单元格格式为日期，结果代码无法识别，无奈我改成了文本类型，然后在模板里面加了输入提示</p></blockquote><blockquote><p>2.因为需求说不是所有数据都是必须填写的，我处理的逻辑是如果关键字段不写，那么后面这条数据都将没有意义。如果关键字段写了，后面的关联值没有写也是可以保存的，前提是数据库这些字段设计为可以为空的</p></blockquote><h6 id="因为C-的TryParse语法的结果使用out参数抛出的，我用起来异常的难受，并且增加了代码量，我使用泛型封装了一个方法-因为我就用到了这几种类型，后面如果再用到再去补充吧"><a href="#因为C-的TryParse语法的结果使用out参数抛出的，我用起来异常的难受，并且增加了代码量，我使用泛型封装了一个方法-因为我就用到了这几种类型，后面如果再用到再去补充吧" class="headerlink" title="因为C#的TryParse语法的结果使用out参数抛出的，我用起来异常的难受，并且增加了代码量，我使用泛型封装了一个方法,因为我就用到了这几种类型，后面如果再用到再去补充吧"></a>因为C#的TryParse语法的结果使用out参数抛出的，我用起来异常的难受，并且增加了代码量，我使用泛型封装了一个方法,因为我就用到了这几种类型，后面如果再用到再去补充吧</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class DataConvertHelper&lt;T&gt; where T : new()</span><br><span class="line">&#123;</span><br><span class="line">  public static T ConvertToBaseType(string fromData)</span><br><span class="line">&#123;</span><br><span class="line">T t = new T();</span><br><span class="line">if (t.GetType() == typeof(System.Int32))</span><br><span class="line">&#123;</span><br><span class="line">Int32.TryParse(fromData, out int result);</span><br><span class="line">return (T)(object)result;</span><br><span class="line">&#125;</span><br><span class="line">if (t.GetType() == typeof(System.Decimal))</span><br><span class="line">&#123;</span><br><span class="line">decimal.TryParse(fromData, out decimal result);</span><br><span class="line">return (T)(object)result;</span><br><span class="line">&#125;</span><br><span class="line">if (t.GetType() == typeof(System.DateTime))</span><br><span class="line">&#123;</span><br><span class="line">DateTime.TryParse(fromData, out DateTime result);</span><br><span class="line">return (T)(object)result;</span><br><span class="line">&#125;</span><br><span class="line">return default(T);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是很有意义的一天，520&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需求: Web后台需要做一个Excel导入功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我：看完需求以后，大概得设计Excel7个工作簿模板，9张数据库表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;磨刀不误砍柴工，我迫切的需要一个Excel读取得公共类，然后基于强大的百度自己改造了一个。。。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term=".net" scheme="http://tamron.club/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>SqlDbHelper</title>
    <link href="http://tamron.club/2018/05/12/SqlDbHelper/"/>
    <id>http://tamron.club/2018/05/12/SqlDbHelper/</id>
    <published>2018-05-12T12:39:34.000Z</published>
    <updated>2018-08-01T06:03:17.157Z</updated>
    
    <content type="html"><![CDATA[<p>asp.net 项目基本上都是有数据库服务支持的，这就需要有一个比较常用的类支持文件。</p><p>闲话不多说，直接上代码 </p><a id="more"></a> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br></pre></td><td class="code"><pre><span class="line">   /// &lt;summary&gt;</span><br><span class="line">   /// 针对SQL Server数据库操作的通用类</span><br><span class="line">   /// &lt;/summary&gt;</span><br><span class="line">   public class SqlDbHelper</span><br><span class="line">   &#123;</span><br><span class="line">       private string connectionString;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 设置数据库连接字符串</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public string ConnectionString</span><br><span class="line">       &#123;</span><br><span class="line">           set &#123; connectionString = value; &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 构造函数（默认连接：xxxx）</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public SqlDbHelper() :       this(ConfigurationManager.ConnectionStrings[&quot;xxxx&quot;].ConnectionString)</span><br><span class="line">       &#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 构造函数（需要传入新的连接字符串）</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;connectionString&quot;&gt;数据库连接字符串&lt;/param&gt;</span><br><span class="line">       public SqlDbHelper(string connectionString)</span><br><span class="line">       &#123;</span><br><span class="line">           this.connectionString = connectionString;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       #region 执行一个查询，并返回 DataTable</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 执行一个查询，并返回 DataTable</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sql&quot;&gt;要执行的查询SQL文本命令&lt;/param&gt;</span><br><span class="line">       public DataTable ExecuteDataTable(string sql)</span><br><span class="line">       &#123;</span><br><span class="line">           return ExecuteDataTable(sql, CommandType.Text, null);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 执行一个查询，并返回 DataTable</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sql&quot;&gt;要执行的SQL语句&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;commandType&quot;&gt;要执行的查询语句的类型，如存储过程或者SQL文本命令&lt;/param&gt;</span><br><span class="line">       public DataTable ExecuteDataTable(string sql, CommandType commandType)</span><br><span class="line">       &#123;</span><br><span class="line">           return ExecuteDataTable(sql, commandType, null);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 执行一个查询，并返回 DataTable</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sql&quot;&gt;要执行的SQL语句&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;commandType&quot;&gt;要执行的查询语句的类型，如存储过程或者SQL文本命令&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;parameters&quot;&gt;Transact-SQL 语句或存储过程的参数数组&lt;/param&gt;</span><br><span class="line">       public DataTable ExecuteDataTable(string sql, CommandType commandType, SqlParameter[] parameters)</span><br><span class="line">       &#123;</span><br><span class="line">           DataTable data = new DataTable();//实例化DataTable，用于装载查询结果集</span><br><span class="line"></span><br><span class="line">           using (SqlConnection connection = new SqlConnection(connectionString))</span><br><span class="line">           &#123;</span><br><span class="line">               using (SqlCommand command = new SqlCommand(sql, connection))</span><br><span class="line">               &#123;</span><br><span class="line">                   command.CommandType = commandType;//设置command的CommandType为指定的CommandType</span><br><span class="line"></span><br><span class="line">                   //如果同时传入了参数，则添加这些参数</span><br><span class="line">                   if (parameters != null)</span><br><span class="line">                   &#123;</span><br><span class="line">                       foreach (SqlParameter parameter in parameters)</span><br><span class="line">                       &#123;</span><br><span class="line">                           command.Parameters.Add(parameter);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   //通过包含查询SQL的SqlCommand实例来实例化SqlDataAdapter</span><br><span class="line">                   SqlDataAdapter adapter = new SqlDataAdapter(command);</span><br><span class="line">                   adapter.Fill(data);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           return data;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       #endregion</span><br><span class="line"></span><br><span class="line">       #region 执行一个查询，并返回 SqlDataReader</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 执行一个查询，并返回 SqlDataReader</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sql&quot;&gt;要执行的查询SQL文本命令&lt;/param&gt;</span><br><span class="line">       public SqlDataReader ExecuteReader(string sql)</span><br><span class="line">       &#123;</span><br><span class="line">           return ExecuteReader(sql, CommandType.Text, null);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 执行一个查询，并返回 SqlDataReader</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sql&quot;&gt;要执行的SQL语句&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;commandType&quot;&gt;要执行的查询语句的类型，如存储过程或者SQL文本命令&lt;/param&gt;</span><br><span class="line">       public SqlDataReader ExecuteReader(string sql, CommandType commandType)</span><br><span class="line">       &#123;</span><br><span class="line">           return ExecuteReader(sql, commandType, null);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 执行一个查询，并返回 SqlDataReader</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sql&quot;&gt;要执行的SQL语句&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;commandType&quot;&gt;要执行的查询语句的类型，如存储过程或者SQL文本命令&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;parameters&quot;&gt;Transact-SQL 语句或存储过程的参数数组&lt;/param&gt;</span><br><span class="line">       public SqlDataReader ExecuteReader(string sql, CommandType commandType, SqlParameter[] parameters)</span><br><span class="line">       &#123;</span><br><span class="line">           SqlConnection connection = new SqlConnection(connectionString);</span><br><span class="line">           SqlCommand command = new SqlCommand(sql, connection);</span><br><span class="line">           //如果同时传入了参数，则添加这些参数</span><br><span class="line">           if (parameters != null)</span><br><span class="line">           &#123;</span><br><span class="line">               foreach (SqlParameter parameter in parameters)</span><br><span class="line">               &#123;</span><br><span class="line">                   command.Parameters.Add(parameter);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           connection.Open();</span><br><span class="line">           //CommandBehavior.CloseConnection参数指示关闭Reader对象时关闭与其关联的Connection对象</span><br><span class="line">           return command.ExecuteReader(CommandBehavior.CloseConnection);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       #endregion</span><br><span class="line"></span><br><span class="line">       #region 执行一个查询，并返回一行一列的 Object</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 执行一个查询，并返回一行一列的 Object</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sql&quot;&gt;要执行的查询SQL文本命令&lt;/param&gt;</span><br><span class="line">       public Object ExecuteScalar(string sql)</span><br><span class="line">       &#123;</span><br><span class="line">           return ExecuteScalar(sql, CommandType.Text, null);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 执行一个查询，并返回一行一列的 Object</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sql&quot;&gt;要执行的SQL语句&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;commandType&quot;&gt;要执行的查询语句的类型，如存储过程或者SQL文本命令&lt;/param&gt;</span><br><span class="line">       public Object ExecuteScalar(string sql, CommandType commandType)</span><br><span class="line">       &#123;</span><br><span class="line">           return ExecuteScalar(sql, commandType, null);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 执行一个查询，并返回一行一列的 Object</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sql&quot;&gt;要执行的SQL语句&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;commandType&quot;&gt;要执行的查询语句的类型，如存储过程或者SQL文本命令&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;parameters&quot;&gt;Transact-SQL 语句或存储过程的参数数组&lt;/param&gt;</span><br><span class="line">       public Object ExecuteScalar(string sql, CommandType commandType, SqlParameter[] parameters)</span><br><span class="line">       &#123;</span><br><span class="line">           object result = null;</span><br><span class="line">           using (SqlConnection connection = new SqlConnection(connectionString))</span><br><span class="line">           &#123;</span><br><span class="line">               using (SqlCommand command = new SqlCommand(sql, connection))</span><br><span class="line">               &#123;</span><br><span class="line">                   command.CommandType = commandType;//设置command的CommandType为指定的CommandType</span><br><span class="line">                   //如果同时传入了参数，则添加这些参数</span><br><span class="line">                   if (parameters != null)</span><br><span class="line">                   &#123;</span><br><span class="line">                       foreach (SqlParameter parameter in parameters)</span><br><span class="line">                       &#123;</span><br><span class="line">                           command.Parameters.Add(parameter);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   connection.Open();//打开数据库连接</span><br><span class="line">                   result = command.ExecuteScalar();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           return result;//返回查询结果的第一行第一列，忽略其它行和列</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       #endregion</span><br><span class="line"></span><br><span class="line">       #region 对数据库执行增删改操作</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 对数据库执行增删改操作</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sql&quot;&gt;要执行的查询SQL文本命令&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       public int ExecuteNonQuery(string sql)</span><br><span class="line">       &#123;</span><br><span class="line">           return ExecuteNonQuery(sql, CommandType.Text, null);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 对数据库执行增删改操作</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sql&quot;&gt;要执行的SQL语句&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;commandType&quot;&gt;要执行的查询语句的类型，如存储过程或者SQL文本命令&lt;/param&gt;</span><br><span class="line">       public int ExecuteNonQuery(string sql, CommandType commandType)</span><br><span class="line">       &#123;</span><br><span class="line">           return ExecuteNonQuery(sql, commandType, null);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 对数据库执行增删改操作</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sql&quot;&gt;要执行的SQL语句&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;commandType&quot;&gt;要执行的查询语句的类型，如存储过程或者SQL文本命令&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;parameters&quot;&gt;Transact-SQL 语句或存储过程的参数数组&lt;/param&gt;</span><br><span class="line">       public int ExecuteNonQuery(string sql, CommandType commandType, SqlParameter[] parameters)</span><br><span class="line">       &#123;</span><br><span class="line">           int count = 0;</span><br><span class="line">           using (SqlConnection connection = new SqlConnection(connectionString))</span><br><span class="line">           &#123;</span><br><span class="line">               using (SqlCommand command = new SqlCommand(sql, connection))</span><br><span class="line">               &#123;</span><br><span class="line">                   command.CommandType = commandType;//设置command的CommandType为指定的CommandType</span><br><span class="line">                   //如果同时传入了参数，则添加这些参数</span><br><span class="line">                   if (parameters != null)</span><br><span class="line">                   &#123;</span><br><span class="line">                       foreach (SqlParameter parameter in parameters)</span><br><span class="line">                       &#123;</span><br><span class="line">                           command.Parameters.Add(parameter);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">                   connection.Open();//打开数据库连接</span><br><span class="line"></span><br><span class="line">                   count = command.ExecuteNonQuery();</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           return count;//返回执行增删改操作之后，数据库中受影响的行数</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       #endregion</span><br><span class="line"></span><br><span class="line">       #region 以事务的模式对数据库执行增删改操作</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 以事务的模式对数据库执行增删改操作</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sqlArray&quot;&gt;要执行的SQL语句数组&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;commandType&quot;&gt;要执行的查询语句的类型，如存储过程或者SQL文本命令&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;parametersArray&quot;&gt;Transact-SQL 语句或存储过程的参数数组&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       public bool ExecuteNonQueryTransation(List&lt;string&gt; sqlArray, CommandType commandType, List&lt;SqlParameter[]&gt; parametersArray)</span><br><span class="line">       &#123;</span><br><span class="line">           bool result = false;</span><br><span class="line">           using (SqlConnection connection = new SqlConnection(connectionString))</span><br><span class="line">           &#123;</span><br><span class="line">               connection.Open();//打开数据库连接</span><br><span class="line">               //事务处理</span><br><span class="line">               using (SqlTransaction transaction = connection.BeginTransaction())</span><br><span class="line">               &#123;</span><br><span class="line">                   try</span><br><span class="line">                   &#123;</span><br><span class="line">                       for (int i = 0; i &lt; sqlArray.Count; i++)</span><br><span class="line">                       &#123;</span><br><span class="line">                           string sqlString = sqlArray[i];</span><br><span class="line">                           using (SqlCommand command = new SqlCommand(sqlString, connection, transaction))</span><br><span class="line">                           &#123;</span><br><span class="line">                               command.CommandType = commandType;//设置command的CommandType为指定的CommandType</span><br><span class="line">                               //如果同时传入了参数，则添加这些参数</span><br><span class="line">                               if (parametersArray!=null)</span><br><span class="line">                               &#123;</span><br><span class="line">                                   if (parametersArray[i] != null)</span><br><span class="line">                                   &#123;</span><br><span class="line">                                       foreach (SqlParameter parameter in parametersArray[i])</span><br><span class="line">                                       &#123;</span><br><span class="line">                                           if (parameter.SqlValue == null)</span><br><span class="line">                                           &#123;</span><br><span class="line">                                               parameter.SqlValue = DBNull.Value;</span><br><span class="line">                                           &#125;</span><br><span class="line">                                           command.Parameters.Add(parameter);</span><br><span class="line">                                       &#125;</span><br><span class="line">                                   &#125;</span><br><span class="line">                               &#125;                              </span><br><span class="line">                               command.ExecuteNonQuery();</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       transaction.Commit();   //事务提交</span><br><span class="line">                       result = true;</span><br><span class="line">                   &#125;</span><br><span class="line">                   catch (Exception ex)</span><br><span class="line">                   &#123;</span><br><span class="line">                       transaction.Rollback(); //事务回滚</span><br><span class="line">                       return false;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           return result;//返回执行增删改操作之后，数据库中受影响的行数</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 以事务的模式对数据库执行增删改操作</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;sqlArray&quot;&gt;要执行的SQL语句数组&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;commandType&quot;&gt;要执行的查询语句的类型，如存储过程或者SQL文本命令&lt;/param&gt;</span><br><span class="line">       /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">       public bool ExecuteNonQueryTransation(List&lt;string&gt; sqlArray, CommandType commandType)</span><br><span class="line">       &#123;</span><br><span class="line">           bool result = false;</span><br><span class="line">           using (SqlConnection connection = new SqlConnection(connectionString))</span><br><span class="line">           &#123;</span><br><span class="line">               connection.Open();//打开数据库连接</span><br><span class="line">               //事务处理</span><br><span class="line">               using (SqlTransaction transaction = connection.BeginTransaction())</span><br><span class="line">               &#123;</span><br><span class="line">                   try</span><br><span class="line">                   &#123;</span><br><span class="line">                       for (int i = 0; i &lt; sqlArray.Count; i++)</span><br><span class="line">                       &#123;</span><br><span class="line">                           string sqlString = sqlArray[i];</span><br><span class="line">                           using (SqlCommand command = new SqlCommand(sqlString, connection, transaction))</span><br><span class="line">                           &#123;</span><br><span class="line">                               command.CommandType = commandType;//设置command的CommandType为指定的CommandType</span><br><span class="line">                               command.ExecuteNonQuery();</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       transaction.Commit();   //事务提交</span><br><span class="line">                       result = true;</span><br><span class="line">                   &#125;</span><br><span class="line">                   catch (Exception ex)</span><br><span class="line">                   &#123;</span><br><span class="line">                       transaction.Rollback(); //事务回滚</span><br><span class="line">                       return false;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           return result;//返回执行增删改操作之后，数据库中受影响的行数</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">#endregion</span><br><span class="line"></span><br><span class="line">#region 批量插入数据</span><br><span class="line">public static void BulkInsertData(DataTable dt, string tableName, string connName)</span><br><span class="line">&#123;</span><br><span class="line">var connStr = DbConnectionManager.GetConnectionString(connName);</span><br><span class="line"></span><br><span class="line">SqlConnection conn = new SqlConnection(connStr);</span><br><span class="line">conn.Open();</span><br><span class="line">SqlTransaction tran = conn.BeginTransaction();</span><br><span class="line">SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(conn, SqlBulkCopyOptions.KeepIdentity, tran);//创建SqlBulkCopy对象    </span><br><span class="line">   // bulkCopy = new SqlBulkCopy(sqlConn, SqlBulkCopyOptions.KeepNulls, tran);   </span><br><span class="line"></span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">sqlBulkCopy.DestinationTableName = tableName;//目标数据库表名  </span><br><span class="line">sqlBulkCopy.BatchSize = 1000;//一次批量执行的数据量</span><br><span class="line">sqlBulkCopy.ColumnMappings.Clear();</span><br><span class="line">for (int j = 0; j &lt; dt.Columns.Count; j++)</span><br><span class="line">&#123;</span><br><span class="line">sqlBulkCopy.ColumnMappings.Add((string)dt.Columns[j].ColumnName, (string)dt.Columns[j].ColumnName);//添加要保存的列  </span><br><span class="line">&#125;</span><br><span class="line">sqlBulkCopy.WriteToServer(dt);//将源表中的数据写入数据库中目标表中  </span><br><span class="line">tran.Commit();</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception)</span><br><span class="line">&#123;</span><br><span class="line">tran.Rollback();</span><br><span class="line">throw;</span><br><span class="line">&#125;</span><br><span class="line">finally</span><br><span class="line">&#123;</span><br><span class="line">sqlBulkCopy.Close();</span><br><span class="line">conn.Close();</span><br><span class="line">//GC.Collect();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是核心代码，接下来是如何调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public IHttpActionResult SendMailTest(string email)</span><br><span class="line">&#123;</span><br><span class="line">var result = ControllerService.Run(() =&gt;</span><br><span class="line">&#123;</span><br><span class="line">var service = MailService._ExchangeService();</span><br><span class="line">Microsoft.Exchange.WebServices.Data.EmailMessage message = new Microsoft.Exchange.WebServices.Data.EmailMessage(service);</span><br><span class="line">message.Subject = &quot;测试标题&quot;;</span><br><span class="line">message.Body = new Microsoft.Exchange.WebServices.Data.MessageBody();</span><br><span class="line">message.Body.BodyType = Microsoft.Exchange.WebServices.Data.BodyType.HTML;</span><br><span class="line">var stream = File.OpenRead(HttpRuntime.AppDomainAppPath + &quot;/HtmlTemplate/mail.html&quot;);</span><br><span class="line">StreamReader sr = new StreamReader(stream);</span><br><span class="line">string str = sr.ReadToEnd();//字符串</span><br><span class="line"></span><br><span class="line">message.Body.Text = str;</span><br><span class="line">message.ToRecipients.Add(email);</span><br><span class="line">MailService.Instance.SendEmail(message);</span><br><span class="line">&#125;);</span><br><span class="line">return Ok(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;asp.net 项目基本上都是有数据库服务支持的，这就需要有一个比较常用的类支持文件。&lt;/p&gt;
&lt;p&gt;闲话不多说，直接上代码 &lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="数据库" scheme="http://tamron.club/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Redis缓存技术（下）</title>
    <link href="http://tamron.club/2018/04/04/Redis%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://tamron.club/2018/04/04/Redis缓存技术（下）/</id>
    <published>2018-04-04T10:34:34.000Z</published>
    <updated>2018-07-23T01:10:11.077Z</updated>
    
    <content type="html"><![CDATA[<p>继上一篇的Redis安装篇后，今天我们来研究以下C#具体操作Redis的方法</p><p><img src="http://tamron.club/img/2018-4-4_1.jpg" alt=""></p><h3 id="代码篇"><a href="#代码篇" class="headerlink" title="代码篇"></a>代码篇</h3><p>首先我们安装依赖库</p><p><img src="http://tamron.club/img/RedisNuget.png" alt=""><br><a id="more"></a> </p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">       &#123;</span><br><span class="line">           var redis = ConnectionMultiplexer.Connect(&quot;Localhost:6479,password=ztredis(*)134&amp;^%xswed&quot;);</span><br><span class="line">           var rel = &quot;&quot;;</span><br><span class="line">           //redis.GetDatabase(0)指定数据库0；</span><br><span class="line">           //如果不填写则默认为-1  </span><br><span class="line">           IDatabase db = redis.GetDatabase(0);</span><br><span class="line">           db.StringSet(&quot;key&quot;, &quot;Hello World&quot;);//把值存入key中  </span><br><span class="line">           rel = db.StringGet(&quot;key&quot;);//读取key中的值  </span><br><span class="line">           Console.Write(rel);//打印key中的值</span><br><span class="line">           DateTime time = DateTime.Now.AddDays(30);</span><br><span class="line">           db.KeyExpire(&quot;key&quot;, time);//设置key失效时间  </span><br><span class="line">           redis.Close();//关闭连接  </span><br><span class="line">           redis.Dispose();//释放资源  </span><br><span class="line">           Console.Read();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>控制台结果如下:</p><p><img src="http://tamron.club/img/RedisConsole.png" alt=""></p><p>Redis客户端如下：</p><p><img src="http://tamron.club/img/RedisManage.png" alt=""></p><p>以上就是我们C#写入读取Reids的简单示例</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继上一篇的Redis安装篇后，今天我们来研究以下C#具体操作Redis的方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tamron.club/img/2018-4-4_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;代码篇&quot;&gt;&lt;a href=&quot;#代码篇&quot; class=&quot;headerlink&quot; title=&quot;代码篇&quot;&gt;&lt;/a&gt;代码篇&lt;/h3&gt;&lt;p&gt;首先我们安装依赖库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://tamron.club/img/RedisNuget.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="缓存" scheme="http://tamron.club/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Redis缓存技术（上）</title>
    <link href="http://tamron.club/2018/04/04/Redis%E7%BC%93%E5%AD%98%E6%8A%80%E6%9C%AF%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://tamron.club/2018/04/04/Redis缓存技术（上）/</id>
    <published>2018-04-04T03:20:11.000Z</published>
    <updated>2018-09-04T10:28:23.444Z</updated>
    
    <content type="html"><![CDATA[<p>今天做的笔记是Redis缓存技术，主要是安装</p><blockquote><p>详细内容参考：<a href="https://blog.csdn.net/liqingtx/article/details/60330555" target="_blank" rel="noopener">https://blog.csdn.net/liqingtx/article/details/60330555</a></p></blockquote><h3 id="个人笔记"><a href="#个人笔记" class="headerlink" title="个人笔记"></a>个人笔记</h3><p>Redis是一种基于C语言开发的NoSql缓存工具，主要应用于非关系型大数据的存储查询<br><a id="more"></a> </p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><blockquote><ul><li>Redis能读的速度是<strong>110000</strong>次/s,写的速度是<strong>81000</strong>次/s</li><li>丰富的数据类型 – Redis支持二进制案例的 <strong>Strings, Lists, Hashes, Sets</strong> 及 <strong>Ordered Sets</strong> 数据类型操作</li></ul><ul><li>原子 – Redis的所有操作都是<strong>原子性</strong>的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的，多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来</li><li><strong>丰富的特性</strong> – Redis还支持 publish/subscribe, 通知, key 过期等等特性</li></ul></blockquote><p>escape&gt;<!-- more --> </p><h3 id="Redis与其他key-value存储有什么不同？"><a href="#Redis与其他key-value存储有什么不同？" class="headerlink" title="Redis与其他key-value存储有什么不同？"></a>Redis与其他key-value存储有什么不同？</h3><blockquote><ul><li><p>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于<strong>基本数据结构</strong>的同时对程序员透明，无需进行额外的抽象</p></li><li><p>Redis运行在内存中但是可以<strong>持久化到磁盘</strong>，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情（<strong>比如交集，并集，差集</strong>）。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问</p></li></ul></blockquote><p><img src="http://tamron.club/img/RedisPhoto.jpg" alt=""></p><h3 id="基于Windows安装"><a href="#基于Windows安装" class="headerlink" title="基于Windows安装"></a>基于Windows安装</h3><h6 id="详细的教程在参考链接中已经给出中已经给出，下面看看我的安装步骤"><a href="#详细的教程在参考链接中已经给出中已经给出，下面看看我的安装步骤" class="headerlink" title="详细的教程在参考链接中已经给出中已经给出，下面看看我的安装步骤"></a>详细的教程在参考链接中已经给出中已经给出，下面看看我的安装步骤</h6><p>Redis最关键的是<strong>服务端</strong>和数据库类似，是Redis的核心所在；Redis客户端提供了Redis数据的可视化工具，并提供了一些简单的功能。我们先安装客户端。。。</p><p><img src="http://tamron.club/img/RedisClientUI.png" alt=""></p><p>一般windows应用程序，双击一直点下一步就好了，这样我们就装好客户端了；接下来是服务端</p><p>我们下载服务端程序,解压文件，双击点开文件夹</p><p><img src="http://tamron.club/img/RedisServer1.png" alt=""></p><p>双击点开文件夹</p><p><img src="http://tamron.club/img/RedisClientServer2.png" alt=""></p><p>然后我们运行<code>run.bat</code>，或者以运行<code>cmd</code>进入当前目录，执行<code>redis-server.exe redis.conf</code></p><p><img src="http://tamron.club/img/RedisServer3.png" alt=""></p><p>可以发现Redis服务端已经安装成功，端口号为6479</p><p>现在我们打开Redis客户端管理工具，点击<code>Add New Connection</code></p><p><img src="http://tamron.club/img/RedisClient2.png" alt=""></p><p>可以发现客户端连接一个缓存服务器，需要配置<code>Name</code>（名称）,<code>Host</code>（IP）<code>,Port</code>(端口号)，<code>Auth</code>(理解为密码)。我们给这个缓存库起个名字叫做<code>LocalRedis</code> ；Host是你要连接的缓存服务器的地址；这里我们127.0.0.1；</p><p><code>Port</code>在安装的时候已经给出是6479；接下来是密码，我们打开服务器的<code>redis.conf</code>文件</p><p><img src="http://tamron.club/img/RedisClientServer2.png" alt=""></p><p>找到如下代码，<code>requirepass</code>后面的就是密码了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass ztredis(*)134&amp;^%xswed</span><br></pre></td></tr></table></figure><p>现在我们就可以登录客户端了</p><p><img src="http://tamron.club/img/RedisClient3.png" alt=""></p><p>到这里，我们的安装步骤已经完成。</p><h3 id="关于Redis一些理解"><a href="#关于Redis一些理解" class="headerlink" title="关于Redis一些理解"></a>关于Redis一些理解</h3><ul><li>Redis默认是开启<strong>持久化</strong>的，可根据业务需要关闭，只当作缓存来用，具体在<code>redis.conf</code>配置</li><li><code>redis.conf</code>文件为Redis服务的配置文件，在这里可配置一些参数，比如持久化，空闲超时时限，Redis缓存库数（默认是15），缓存时间等等</li><li>Redis可以根据服务器硬件资源分配给缓存相应的内存资源，具体在<code>redis.conf</code>配置</li><li><strong>Redis持久化</strong>很重要</li></ul><p>下一篇博客会给出具体的Redis+.net的Demo代码</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天做的笔记是Redis缓存技术，主要是安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;详细内容参考：&lt;a href=&quot;https://blog.csdn.net/liqingtx/article/details/60330555&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/liqingtx/article/details/60330555&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;个人笔记&quot;&gt;&lt;a href=&quot;#个人笔记&quot; class=&quot;headerlink&quot; title=&quot;个人笔记&quot;&gt;&lt;/a&gt;个人笔记&lt;/h3&gt;&lt;p&gt;Redis是一种基于C语言开发的NoSql缓存工具，主要应用于非关系型大数据的存储查询&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="缓存" scheme="http://tamron.club/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>程序员的浪漫</title>
    <link href="http://tamron.club/2018/04/01/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%B5%AA%E6%BC%AB/"/>
    <id>http://tamron.club/2018/04/01/程序员的浪漫/</id>
    <published>2018-04-01T10:43:06.000Z</published>
    <updated>2018-08-14T11:44:30.117Z</updated>
    
    <content type="html"><![CDATA[<p>我们程序员在追求爱情方面也是非常浪漫的，利用HTML5知识自制的HTML5爱心表白动画，画面非常温馨甜蜜。</p><hr><p>演示效果<br><a id="more"></a> </p><p><img src="http://tamron.club/img/ourstory.png" alt=""></p><p>源码地址：</p><blockquote><p><a href="https://github.com/zhangdianlei/HTML5-love-you-master" target="_blank" rel="noopener">https://github.com/zhangdianlei/HTML5-love-you-master</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们程序员在追求爱情方面也是非常浪漫的，利用HTML5知识自制的HTML5爱心表白动画，画面非常温馨甜蜜。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;演示效果&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://tamron.club/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="浪漫" scheme="http://tamron.club/tags/%E6%B5%AA%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>Sql脚本</title>
    <link href="http://tamron.club/2018/03/30/Sql%E8%84%9A%E6%9C%AC/"/>
    <id>http://tamron.club/2018/03/30/Sql脚本/</id>
    <published>2018-03-30T08:39:34.000Z</published>
    <updated>2018-07-23T00:59:40.824Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Sql脚本笔记"><a href="#Sql脚本笔记" class="headerlink" title="Sql脚本笔记"></a>Sql脚本笔记</h2><h3 id="快速查看表结构"><a href="#快速查看表结构" class="headerlink" title="快速查看表结构"></a>快速查看表结构</h3><p>假如有一天和别人对接功能，别人给你扔过来个数据库，里面有几张表。如果手动去点击查询的话效率会非常的慢。以下Sql代码执行查询后会将表的的字段说明，类型，IsNULL等信息清楚的展示出来。当然前提是表中有字段说明，没有的话就得慢慢摸索了。。。</p><p>Sql数据库查询表结构可以通过以下代码查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="comment">--快速查看表结构（比较全面的）</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">CASE</span> <span class="keyword">WHEN</span> col.colorder = <span class="number">1</span> <span class="keyword">THEN</span> obj.name</span><br><span class="line">                  <span class="keyword">ELSE</span> <span class="string">''</span></span><br><span class="line">             <span class="keyword">END</span> <span class="keyword">AS</span> 表名,</span><br><span class="line">        col.colorder <span class="keyword">AS</span> 序号 ,</span><br><span class="line">        col.name <span class="keyword">AS</span> 列名 ,</span><br><span class="line">        <span class="keyword">ISNULL</span>(ep.[<span class="keyword">value</span>], <span class="string">''</span>) <span class="keyword">AS</span> 列说明 ,</span><br><span class="line">        t.name <span class="keyword">AS</span> 数据类型 ,</span><br><span class="line">        col.length <span class="keyword">AS</span> 长度 ,</span><br><span class="line">        <span class="keyword">ISNULL</span>(COLUMNPROPERTY(col.id, col.name, <span class="string">'Scale'</span>), <span class="number">0</span>) <span class="keyword">AS</span> 小数位数 ,</span><br><span class="line">        <span class="keyword">CASE</span> <span class="keyword">WHEN</span> COLUMNPROPERTY(col.id, col.name, <span class="string">'IsIdentity'</span>) = <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'√'</span></span><br><span class="line">             <span class="keyword">ELSE</span> <span class="string">''</span></span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">AS</span> 标识 ,</span><br><span class="line">        <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">EXISTS</span> ( <span class="keyword">SELECT</span>   <span class="number">1</span></span><br><span class="line">                           <span class="keyword">FROM</span>     dbo.sysindexes si</span><br><span class="line">                                    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.sysindexkeys sik <span class="keyword">ON</span> si.id = sik.id</span><br><span class="line">                                                              <span class="keyword">AND</span> si.indid = sik.indid</span><br><span class="line">                                    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.syscolumns sc <span class="keyword">ON</span> sc.id = sik.id</span><br><span class="line">                                                              <span class="keyword">AND</span> sc.colid = sik.colid</span><br><span class="line">                                    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.sysobjects so <span class="keyword">ON</span> so.name = si.name</span><br><span class="line">                                                              <span class="keyword">AND</span> so.xtype = <span class="string">'PK'</span></span><br><span class="line">                           <span class="keyword">WHERE</span>    sc.id = col.id</span><br><span class="line">                                    <span class="keyword">AND</span> sc.colid = col.colid ) <span class="keyword">THEN</span> <span class="string">'√'</span></span><br><span class="line">             <span class="keyword">ELSE</span> <span class="string">''</span></span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">AS</span> 主键 ,</span><br><span class="line">        <span class="keyword">CASE</span> <span class="keyword">WHEN</span> col.isnullable = <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'√'</span></span><br><span class="line">             <span class="keyword">ELSE</span> <span class="string">''</span></span><br><span class="line">        <span class="keyword">END</span> <span class="keyword">AS</span> 允许空 ,</span><br><span class="line">        <span class="keyword">ISNULL</span>(comm.text, <span class="string">''</span>) <span class="keyword">AS</span> 默认值</span><br><span class="line"><span class="keyword">FROM</span>    dbo.syscolumns <span class="keyword">col</span></span><br><span class="line">        <span class="keyword">LEFT</span>  <span class="keyword">JOIN</span> dbo.systypes t <span class="keyword">ON</span> col.xtype = t.xusertype</span><br><span class="line">        <span class="keyword">inner</span> <span class="keyword">JOIN</span> dbo.sysobjects obj <span class="keyword">ON</span> col.id = obj.id</span><br><span class="line">                                         <span class="keyword">AND</span> obj.xtype = <span class="string">'U'</span></span><br><span class="line">                                         <span class="keyword">AND</span> obj.status &gt;= <span class="number">0</span></span><br><span class="line">        <span class="keyword">LEFT</span>  <span class="keyword">JOIN</span> dbo.syscomments comm <span class="keyword">ON</span> col.cdefault = comm.id</span><br><span class="line">        <span class="keyword">LEFT</span>  <span class="keyword">JOIN</span> sys.extended_properties ep <span class="keyword">ON</span> col.id = ep.major_id</span><br><span class="line">                                                      <span class="keyword">AND</span> col.colid = ep.minor_id</span><br><span class="line">                                                      <span class="keyword">AND</span> ep.name = <span class="string">'MS_Description'</span></span><br><span class="line">        <span class="keyword">LEFT</span>  <span class="keyword">JOIN</span> sys.extended_properties epTwo <span class="keyword">ON</span> obj.id = epTwo.major_id</span><br><span class="line">                                                         <span class="keyword">AND</span> epTwo.minor_id = <span class="number">0</span></span><br><span class="line">                                                         <span class="keyword">AND</span> epTwo.name = <span class="string">'MS_Description'</span></span><br><span class="line"><span class="keyword">WHERE</span>   obj.name = <span class="string">'NcCorporation'</span><span class="comment">--表名</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> col.colorder ;</span><br></pre></td></tr></table></figure><h3 id="Sql循环插入100万条数据"><a href="#Sql循环插入100万条数据" class="headerlink" title="Sql循环插入100万条数据"></a>Sql循环插入100万条数据</h3><p>我们经常会用代码处理一些大数据，Sql执行效率会显得异常重要。以下代码是循环插入100万条数据，可模拟业务数据进行Sql代码调优。</p><ul><li>首先创建Student表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">create</span> <span class="keyword">table</span> student</span><br><span class="line">(</span><br><span class="line">sno <span class="built_in">int</span> ,</span><br><span class="line">sname <span class="built_in">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>向数据库中插入100万条随机姓名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">DECLARE</span> @<span class="keyword">LN</span> <span class="built_in">VARCHAR</span>(<span class="number">300</span>),@MN <span class="built_in">VARCHAR</span>(<span class="number">200</span>),@FN <span class="built_in">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line"><span class="keyword">DECLARE</span> @LN_N <span class="built_in">INT</span>,@MN_N <span class="built_in">INT</span>,@FN_N <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">LN</span>=<span class="string">'李王张刘陈杨黄赵周吴徐孙朱马胡郭林何高梁郑罗宋谢唐韩曹许邓萧冯曾程蔡彭潘袁于董余苏叶吕魏蒋田杜丁沈姜范江傅钟卢汪戴崔任陆廖姚方金邱夏谭韦贾邹石熊孟秦阎薛侯雷白龙段郝孔邵史毛常万顾赖武康贺严尹钱施牛洪龚'</span></span><br><span class="line"><span class="keyword">SET</span> @MN=<span class="string">'德绍宗邦裕傅家積善昌世贻维孝友继绪定呈祥大正启仕执必定仲元魁家生先泽远永盛在人为任伐风树秀文光谨潭棰'</span></span><br><span class="line"><span class="keyword">SET</span> @FN=<span class="string">'丽云峰磊亮宏红洪量良梁良粮靓七旗奇琪谋牟弭米密祢磊类蕾肋庆情清青兴幸星刑'</span></span><br><span class="line"><span class="keyword">SET</span> @LN_N=<span class="keyword">LEN</span>(@<span class="keyword">LN</span>)</span><br><span class="line"><span class="keyword">SET</span> @MN_N=<span class="keyword">LEN</span>(@MN)</span><br><span class="line"><span class="keyword">SET</span> @FN_N=<span class="keyword">LEN</span>(@FN)</span><br><span class="line"><span class="keyword">DECLARE</span> @TMP <span class="built_in">VARCHAR</span>(<span class="number">1000</span>),@I <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">SET</span> @I=<span class="number">100</span></span><br><span class="line"><span class="keyword">WHILE</span> @I&lt;<span class="number">1000000</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SET</span> @TMP=<span class="keyword">CAST</span>(<span class="keyword">SUBSTRING</span>(@<span class="keyword">LN</span>,<span class="keyword">CAST</span>(<span class="keyword">RAND</span>()*@LN_N <span class="keyword">AS</span> <span class="built_in">INT</span>),<span class="number">1</span>) <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>)</span><br><span class="line">    <span class="keyword">SET</span> @TMP=@TMP+<span class="keyword">CAST</span>(<span class="keyword">SUBSTRING</span>(@MN,<span class="keyword">CAST</span>(<span class="keyword">RAND</span>()*@MN_N <span class="keyword">AS</span> <span class="built_in">INT</span>),<span class="number">1</span>) <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>)</span><br><span class="line">    <span class="keyword">SET</span> @TMP=@TMP+<span class="keyword">CAST</span>(<span class="keyword">SUBSTRING</span>(@FN,<span class="keyword">CAST</span>(<span class="keyword">RAND</span>()*@FN_N <span class="keyword">AS</span> <span class="built_in">INT</span>),<span class="number">1</span>) <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>)</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sno,sname)<span class="keyword">VALUES</span>(<span class="string">'2005'</span>+@I,@TMP)</span><br><span class="line">    <span class="keyword">SET</span> @I=@I+<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Sql脚本笔记&quot;&gt;&lt;a href=&quot;#Sql脚本笔记&quot; class=&quot;headerlink&quot; title=&quot;Sql脚本笔记&quot;&gt;&lt;/a&gt;Sql脚本笔记&lt;/h2&gt;&lt;h3 id=&quot;快速查看表结构&quot;&gt;&lt;a href=&quot;#快速查看表结构&quot;
      
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="sql" scheme="http://tamron.club/tags/sql/"/>
    
      <category term="数据库" scheme="http://tamron.club/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="http://tamron.club/2018/03/30/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://tamron.club/2018/03/30/Hexo常用命令/</id>
    <published>2018-03-30T08:39:34.000Z</published>
    <updated>2018-04-04T02:55:59.385Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Hexo常用命令笔记"><a href="#Hexo常用命令笔记" class="headerlink" title="Hexo常用命令笔记"></a>Hexo常用命令笔记</h2><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h3 id="启动服务预览"><a href="#启动服务预览" class="headerlink" title="启动服务预览"></a>启动服务预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h3 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Hexo常用命令笔记&quot;&gt;&lt;a href=&quot;#Hexo常用命令笔记&quot; class=&quot;headerlink&quot; title=&quot;Hexo常用命令笔记&quot;&gt;&lt;/a&gt;Hexo常用命令笔记&lt;/h2&gt;&lt;h3 id=&quot;生成&quot;&gt;&lt;a href=&quot;#生
      
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Hexo" scheme="http://tamron.club/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>数据结构的魅力</title>
    <link href="http://tamron.club/2017/08/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://tamron.club/2017/08/04/数据结构/</id>
    <published>2017-08-04T03:20:11.000Z</published>
    <updated>2018-09-04T09:26:10.042Z</updated>
    
    <content type="html"><![CDATA[<p>今天做的笔记是基本数据结构知识</p><h3 id="个人笔记"><a href="#个人笔记" class="headerlink" title="个人笔记"></a>个人笔记</h3><blockquote><p>大学里面那本严蔚敏的数据结构不厚，内容丰富，但是复杂问题的讲解方面篇幅这样就少了，比较难理解，c也不是很擅长，但是基本的思路还是有的。</p><p>简单的链表，数组，堆栈，队列，图，几个排序算法。</p></blockquote><a id="more"></a> <h3 id="技术与通俗"><a href="#技术与通俗" class="headerlink" title="技术与通俗"></a>技术与通俗</h3><p>知乎上看到一个人对数据结构的看法，我觉的说的很好，在这里引用一下</p><blockquote><p> 如果说 Java 是自动档轿车，C 就是手动档吉普。数据结构呢？是变速箱的工作原理。你完全可以不知道变速箱怎样工作，就把自动档的车子从 A 开到 B，而且未必就比懂得的人慢。写程序这件事，和开车一样，经验可以起到很大作用，但如果你不知道底层是怎么工作的，就永远只能开车，既不会修车，也不能造车。如果你对这两件事都不感兴趣也就罢了，数据结构懂得用就好。但若你此生在编程领域还有点更高的追求，数据结构是绕不开的课题。</p><p> Java 替你做了太多事情，那么多动不动还支持范型的容器类，加上垃圾收集，会让你觉得编程很容易。但你有没有想过，那些容器类是怎么来的，以及它存在的意义是什么？最粗浅的，比如 ArrayList 这个类，你想过它的存在是多么大的福利吗——一个可以随机访问、自动增加容量的数组，这种东西 C 是没有的，要自己实现。但是，具体怎么实现呢？如果你对这种问题感兴趣，那数据结构是一定要看的。甚至，面向对象编程范式本身，就是个数据结构问题：怎么才能把数据和操作数据的方法封装到一起，来造出 class / prototype 这种东西？</p><p> 此外，很重要的一点是，数据结构也是通向各种实用算法的基石，所以学习数据结构都是提升内力的事情。</p></blockquote><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><h4 id="堆：什么是堆？又该怎么理解呢？"><a href="#堆：什么是堆？又该怎么理解呢？" class="headerlink" title="堆：什么是堆？又该怎么理解呢？"></a>堆：什么是堆？又该怎么理解呢？</h4><p><code>堆通常是一个可以被看做一棵树的数组对象。</code>堆总是满足下列性质：</p><ul><li><p>堆中某个节点的值总是不大于或不小于其父节点的值；</p></li><li><p>堆总是一棵完全二叉树。</p></li><li><p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契    堆等。</p></li></ul><ul><li><p>堆是在程序运行时，而不是在程序编译时，申请某个大小的内存空间。即动态分配内存，对其访问和对一般内存的访问没有区别。</p></li><li><p>堆是应用程序在运行的时候请求操作系统分配给自己内存，一般是申请/给予的过程。</p></li><li><p>堆是指程序运行时申请的动态内存，而栈只是指一种使用堆的方法(即先进后出)。</p></li></ul><h4 id="栈：什么是栈？又该怎么理解呢？"><a href="#栈：什么是栈？又该怎么理解呢？" class="headerlink" title="栈：什么是栈？又该怎么理解呢？"></a>栈：什么是栈？又该怎么理解呢？</h4><ul><li><p>栈（stack）又名堆栈，它是一种运算受限的线性表。其限制是仅允许在表的一端进行插入和删除运算。这一端被称为栈顶，相对地，把另一端称为栈底。</p></li><li><p>栈就是一个桶，后放进去的先拿出来，它下面本来有的东西要等它出来之后才能出来（先进后出）</p></li><li><p>栈(Stack)是操作系统在建立某个进程时或者线程（在支持多线程的操作系统中是线程）为这个线程建立的存储区域，该区域具有FIFO的特性，在编译的时候可以指定需要的Stack的大小。</p></li></ul><h4 id="堆栈：什么是堆栈？又该怎么理解呢？"><a href="#堆栈：什么是堆栈？又该怎么理解呢？" class="headerlink" title="堆栈：什么是堆栈？又该怎么理解呢？"></a>堆栈：什么是堆栈？又该怎么理解呢？</h4><p>注意：其实堆栈本身就是栈，只是换了个抽象的名字。</p><p>堆栈的特性： 最后一个放入堆栈中的物体总是被最先拿出来， 这个特性通常称为后进先出(LIFO)队列。 堆栈中定义了一些操作。 两个最重要的是PUSH和POP。 PUSH操作在堆栈的顶部加入一 个元素。POP操作相反， 在堆栈顶部移去一个元素， 并将堆栈的大小减一。</p><h4 id="堆、栈区别总结-："><a href="#堆、栈区别总结-：" class="headerlink" title="堆、栈区别总结 ："></a>堆、栈区别总结 ：</h4><p> 1.堆栈空间分配</p><p> ①栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</p><p> ②堆（操作系统）： 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收，分配方式倒是类似于链表。</p><p>2.堆栈缓存方式</p><p>①栈使用的是一级缓存， 他们通常都是被调用时处于存储空间中，调用完毕立即释放。</p><p>②堆则是存放在二级缓存中，生命周期由虚拟机的垃圾回收算法来决定（并不是一旦成为孤儿对象就能被回收）。所以调用这些对象的速度要相对来得低一些。</p><p>3.堆栈数据结构区别</p><p>①堆（数据结构）：堆可以被看成是一棵树，如：堆排序。</p><p>②栈（数据结构）：一种先进后出的数据结构。</p><h4 id="队列：什么是队列？又该怎么理解呢？"><a href="#队列：什么是队列？又该怎么理解呢？" class="headerlink" title="队列：什么是队列？又该怎么理解呢？"></a>队列：什么是队列？又该怎么理解呢？</h4><p>① 队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。</p><p>②队列中没有元素时，称为空队列。</p><p>③建立顺序队列结构必须为其静态分配或动态申请一片连续的存储空间，并设置两个指针进行管理。一个是队头指针front，它指向队头元素；另一个是队尾指针rear，它指向下一个入队元素的存储位置。</p><p>④队列采用的FIFO(first in first out)，新元素（等待进入队列的元素）总是被插入到链表的尾部，而读取的时候总是从链表的头部开始读取。每次读取一个元素，释放一个元素。所谓的动态创建，动态释放。因而也不存在溢出等问题。由于链表由结构体间接而成，遍历也方便。（先进先出）</p><h4 id="堆、栈、队列之间的区别是？"><a href="#堆、栈、队列之间的区别是？" class="headerlink" title="堆、栈、队列之间的区别是？"></a>堆、栈、队列之间的区别是？</h4><p>①堆是在程序运行时，而不是在程序编译时，申请某个大小的内存空间。即动态分配内存，对其访问和对一般内存的访问没有区别。</p><p>②栈就是一个桶，后放进去的先拿出来，它下面本来有的东西要等它出来之后才能出来。（后进先出）</p><p>③队列只能在队头做删除操作,在队尾做插入操作.而栈只能在栈顶做插入和删除操作。（先进先出）</p><h3 id="代码之集合-选择正确的集合"><a href="#代码之集合-选择正确的集合" class="headerlink" title="代码之集合~选择正确的集合"></a>代码之集合~选择正确的集合</h3><p>要选用正确的集合，首先需要了解一些数据结构的知识。所谓数据结构，就是相互之间存在一种或多种特定关系的数据元素的集合。</p><p><img src="http://tamron.club/img/数据结构的选择.png" alt=""></p><blockquote><p>关于集合的选择详见《[编写高质量代码改善C#程序的157个建议].陆敏技》书中58页</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天做的笔记是基本数据结构知识&lt;/p&gt;
&lt;h3 id=&quot;个人笔记&quot;&gt;&lt;a href=&quot;#个人笔记&quot; class=&quot;headerlink&quot; title=&quot;个人笔记&quot;&gt;&lt;/a&gt;个人笔记&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;大学里面那本严蔚敏的数据结构不厚，内容丰富，但是复杂问题的讲解方面篇幅这样就少了，比较难理解，c也不是很擅长，但是基本的思路还是有的。&lt;/p&gt;
&lt;p&gt;简单的链表，数组，堆栈，队列，图，几个排序算法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://tamron.club/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term=".net" scheme="http://tamron.club/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>北大新任校长的十句话，全场掌声如雷</title>
    <link href="http://tamron.club/2017/08/01/%E5%8C%97%E5%A4%A7%E6%96%B0%E4%BB%BB%E6%A0%A1%E9%95%BF%E7%9A%84%E5%8D%81%E5%8F%A5%E8%AF%9D/"/>
    <id>http://tamron.club/2017/08/01/北大新任校长的十句话/</id>
    <published>2017-08-01T10:43:06.000Z</published>
    <updated>2018-08-18T08:16:10.494Z</updated>
    
    <content type="html"><![CDATA[<p>北大信任校长的十句话，全场掌声如雷</p><blockquote><h3 id="第一句话"><a href="#第一句话" class="headerlink" title="第一句话"></a>第一句话</h3><p>结交两个朋友，一个是图书馆，一个是运动场。</p></blockquote><p><img src="http://tamron.club/img/北大校长十句话-1.png" alt=""></p><blockquote><h3 id="第二句话"><a href="#第二句话" class="headerlink" title="第二句话"></a>第二句话</h3><p>培养两种功夫，一个是本分，一个是本事。</p></blockquote><blockquote><h3 id="第三句话"><a href="#第三句话" class="headerlink" title="第三句话"></a>第三句话</h3><p>乐于吃两种东西，一个是吃亏，一个是吃苦</p></blockquote><blockquote><h3 id="第四句话"><a href="#第四句话" class="headerlink" title="第四句话"></a>第四句话</h3><p>具备两种力量，一个是思想的力量，一个是利剑的凉凉</p></blockquote><blockquote><h3 id="第五句话"><a href="#第五句话" class="headerlink" title="第五句话"></a>第五句话</h3><p>追求两个一致，一个是兴趣与事业一致，一个是爱情与婚姻一致</p></blockquote><blockquote><h3 id="第六句话"><a href="#第六句话" class="headerlink" title="第六句话"></a>第六句话</h3><p>插上两个翅膀，一个叫理想，一个叫毅力</p></blockquote><blockquote><h3 id="第七句话"><a href="#第七句话" class="headerlink" title="第七句话"></a>第七句话</h3><p>构建两个支柱，一个是科学，一个是人文</p></blockquote><blockquote><h3 id="第八句话"><a href="#第八句话" class="headerlink" title="第八句话"></a>第八句话</h3><p>配备两个保健医生，一个叫运动，一个叫乐观</p></blockquote><blockquote><h3 id="第九句话"><a href="#第九句话" class="headerlink" title="第九句话"></a>第九句话</h3><p>追求两个极致，一个是把自身的潜力发挥到极致，一个是把自己的寿命健康延长到极致</p></blockquote><blockquote><h3 id="第十句话"><a href="#第十句话" class="headerlink" title="第十句话"></a>第十句话</h3><p>记住两个秘诀，健康的秘诀在早上，成功的秘诀在晚上</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;北大信任校长的十句话，全场掌声如雷&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;第一句话&quot;&gt;&lt;a href=&quot;#第一句话&quot; class=&quot;headerlink&quot; title=&quot;第一句话&quot;&gt;&lt;/a&gt;第一句话&lt;/h3&gt;&lt;p&gt;结交两个朋友，一个是图书馆，一个是运动场。&lt;/p
      
    
    </summary>
    
      <category term="随笔" scheme="http://tamron.club/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="励志" scheme="http://tamron.club/tags/%E5%8A%B1%E5%BF%97/"/>
    
  </entry>
  
</feed>
